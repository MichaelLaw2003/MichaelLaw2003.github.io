<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title> Notes on Stomatopod&#39;s visual ability: 1 </title>
    <url>/2024/01/28/Notes-on-Stomatopod-s-visual-ability-1/</url>
    <content><![CDATA[<h1 id="Notes-on-Stomatopod’s-visual-ability-1"><a href="#Notes-on-Stomatopod’s-visual-ability-1" class="headerlink" title="Notes on Stomatopod’s visual ability: 1"></a>Notes on Stomatopod’s visual ability: 1</h1><h2 id="Research-subject"><a href="#Research-subject" class="headerlink" title="Research subject"></a>Research subject</h2><p>The research subject is the Stomatopod, which is commonly known as the mantis shrimp.</p>
<p>The Stomatopods have the greatest diversity of color receptor types known for any animal, and have a diverse set of photoreceptors that visualize polarized light. The review will focus on the features of the Stomatopod’s ability to visualize color and polarized light .</p>
<p>In this field, the term “Stomatopod” is usually restricted to Gonodactyloidea and Lysiosquilloidea species.</p>
<p><em>Odontodactylus scyllarus</em>, a gonodactyloid stomatopod, is a commonly used model organism.</p>
<p><img src="/2024/01/28/Notes-on-Stomatopod-s-visual-ability-1/image1.jpg" alt="&quot;Odontodactylus havanensis&quot;"></p>
<p><em>Odontodactylus havanensis</em>, (Cronin, 2006) <em>Copyright © 2006 Elsevier Ltd. All rights reserved.</em>, License Number 5716910107274</p>
<h2 id="Morphological-description-of-the-compound-eye-of-Stomatopods"><a href="#Morphological-description-of-the-compound-eye-of-Stomatopods" class="headerlink" title="Morphological description of the compound eye of Stomatopods"></a>Morphological description of the compound eye of Stomatopods</h2><p>The apposition compound eyes of an <em>Odontodactylus scyllarus</em> is morphologically divided in to three parts, namely (a) the dorsal hemisphere, (b) the <strong>midband</strong>, and (c) the ventral hemisphere. The basic units of vision of the compound eye is termed as “<strong>ommatidia</strong>“.</p>
<p>The midband has 6 rows of ommatidia with bigger cornea compared with other ommatidia. This suggest that the midband and hemispherical ommatidia have different function. The dorsal hemisphere and a ventral hemisphere is spatially divided up by the midband.(Marshall, 1988)</p>
<p>(The compond eye of <em>Lysiosquilla tredecimdentata</em> has larger dorsal and ventral hemispheres, but still has the midband consisting of 6 rows of ommatidia. The compond eye of Oratosquilla solicitans*, from another superfamily, only has 2 midbands.) (Marshall et al., 2007)</p>
<p><img src="/2024/01/28/Notes-on-Stomatopod-s-visual-ability-1/image2.png" alt="Eye"></p>
<p>Eye of <em>Odontodactylus scyllarus</em>, (a) Frontal view, Scale 500 mm. (b) Dorsal view, showing the dorsal hemisphere and eye stalk. Scale 500 mm. (c) Sagittal section through <em>O. scyllarus</em> eye. From right to left: cornea, crystalline cones, distal retinal pigment (white line), retina (black crescent), and the first optic neuropil, the lamina ganglionaris (white region). Scale 400 mm. (Marshall et al., 2007) <em>Copyright © 1988, Springer Nature Limited</em></p>
<h2 id="General-anatomical-description-of-the-ommatidia-of-Stomatopods"><a href="#General-anatomical-description-of-the-ommatidia-of-Stomatopods" class="headerlink" title="General anatomical description of the ommatidia of Stomatopods"></a>General anatomical description of the ommatidia of Stomatopods</h2><p>The 6 rows of the midband ommatidia are structurally different from one another. There are 16 anatomically different photoreceptors in the compond eye of Stomatopod.</p>
<p>A ommatidium, from the distal end to the proximal end, roughly consists of 4 main parts, namely (a) cornea(lenses), (b) crystalline cones, (c) distal pigment, (d) rhabdom and sensory cells. At the proximal end, the ommatidia are connected to the nerve fiber by axons. (Marshall, 1988)</p>
<p><img src="/2024/01/28/Notes-on-Stomatopod-s-visual-ability-1/image3.png" alt="ommatidia"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Cronin, T. W. (2006). Stomatopods. <em>Current Biology</em>, <em>16</em>(7), R235-R236. <a href="https://doi.org/10.1016/j.cub.2006.03.014">https://doi.org/10.1016/j.cub.2006.03.014</a></p>
<p>Marshall, J., Cronin, T. W., &amp; Kleinlogel, S. (2007). Stomatopod eye structure and function: a review. <em>Arthropod Struct Dev</em>, <em>36</em>(4), 420-448. <a href="https://doi.org/10.1016/j.asd.2007.01.006">https://doi.org/10.1016/j.asd.2007.01.006</a></p>
<p>Marshall, N. J. (1988). A Unique Color and Polarization Vision System in Mantis Shrimps. <em>Nature</em>, <em>333</em>(6173), 557-560. <a href="https://doi.org/DOI">https://doi.org/DOI</a> 10.1038&#x2F;333557a0</p>
]]></content>
      <categories>
        <category>neuroscience</category>
      </categories>
      <tags>
        <tag>mantis shrimp</tag>
        <tag>vision</tag>
        <tag>neuroscience</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes on Stomatopod&#39;s visual ability: 2</title>
    <url>/2024/02/03/Notes-on-Stomatopod-s-visual-ability-2/</url>
    <content><![CDATA[<h1 id="Notes-on-Stomatopod’s-visual-ability-2"><a href="#Notes-on-Stomatopod’s-visual-ability-2" class="headerlink" title="Notes on Stomatopod’s visual ability: 2"></a>Notes on Stomatopod’s visual ability: 2</h1><h2 id="Terms-and-abbreviations"><a href="#Terms-and-abbreviations" class="headerlink" title="Terms and abbreviations"></a>Terms and abbreviations</h2><table>
<thead>
<tr>
<th>Abbreviation</th>
<th>Term</th>
<th>Description</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>MO[x]</td>
<td>mid-band ommatidia(中带复眼)</td>
<td>Basic units of a mid-band.</td>
<td>There are 6 <strong>rows</strong> of midband eyes, designated as MO[1-6]. Each ommatidium in MO[1-4] has 3 tiers of rhabdom. Each ommatidium in MO[5,6] has 2 tiers of rhabdom. A  hemispherical ommatidium has 2 tiers of rhabdom.</td>
</tr>
<tr>
<td>R[x]</td>
<td>Rhabdomeres(感杆）</td>
<td>The elongated rod-like portion of the retinular cells, the subunit of the  rhabdom, containing closely spaced and longitudinal rows of microvilli and  pigment granules.</td>
<td>There are 8 <strong>types</strong> of rhabdomeres, designated as R[1-8]. R8  cells consist the most distal tier of rhabdom in all types (midband and  hemispherical) of ommatidium.</td>
</tr>
<tr>
<td>DR[x]</td>
<td>Distally placed rhabdomeres（远端感杆）</td>
<td>Rhabdomeres that consist the distally placed rhabdom in <strong>MO[1-4]</strong>, which is  placed between the R[8] rhabdom and the PR rhabdom.</td>
<td>There are 7 <strong>types</strong> of DR, which are  R[1-7]. They are specially designated as DR[1-7].</td>
</tr>
<tr>
<td>PR[x]</td>
<td>Proximal placed rhabdomeres（近端感杆）</td>
<td>Rhabdomeres that consist the proximally placed rhabdom in <strong>MO[1-4]</strong>, which  is placed at the proximal end, that is, close to the basement menbrane.</td>
<td>There are 7 <strong>types</strong> of PR,  which are R[1-7]. They are specially  designated as PR[1-7].</td>
</tr>
<tr>
<td>F[x]</td>
<td>Filter（滤光体）</td>
<td>Specialized, coloured intra-rhabdomal structures in <strong>MO[2,3]</strong>, function as  the filter of light in a specific wavelength band.</td>
<td>There are 2 <strong>layers</strong> of filters, designated as F[1], F[2]. F[1] is relatively distal and F[2] is relatively proximal.</td>
</tr>
</tbody></table>
<h2 id="General-structures-of-hemispherical-ommatidia"><a href="#General-structures-of-hemispherical-ommatidia" class="headerlink" title="General structures of hemispherical ommatidia"></a>General structures of hemispherical ommatidia</h2><p><img src="/2024/02/03/Notes-on-Stomatopod-s-visual-ability-2/ommatidia1.svg" alt="Structure of hemispherical ommatidia"></p>
<h2 id="General-structures-of-mid-band-ommatidia"><a href="#General-structures-of-mid-band-ommatidia" class="headerlink" title="General structures of  mid-band ommatidia"></a>General structures of  mid-band ommatidia</h2><h3 id="General-Structure-of-MO-1-4"><a href="#General-Structure-of-MO-1-4" class="headerlink" title="General Structure of MO[1-4]"></a>General Structure of MO[1-4]</h3><p>![midband ommatidia](Notes-on-Stomatopod-s-visual-ability-2&#x2F;midband ommatidia.svg)</p>
<h3 id="Special-structures-of-MO-2-3-Filters"><a href="#Special-structures-of-MO-2-3-Filters" class="headerlink" title="Special structures of MO[2,3] - Filters"></a>Special structures of MO[2,3] - Filters</h3><p><img src="/2024/02/03/Notes-on-Stomatopod-s-visual-ability-2/filters.svg" alt="filters"></p>
<h3 id="General-Structure-of-MO-5-6"><a href="#General-Structure-of-MO-5-6" class="headerlink" title="General Structure of MO[5,6]"></a>General Structure of MO[5,6]</h3><p>The General structure of MO[5,6] is similar to that of hemispherical ommatidia. However, the arrangement of microvillar in MO[5,6] are modified.</p>
<ul>
<li>Very thin layering with precise orthogonal arrangements in R[1-7];</li>
<li>Unidirectionally arranged microvili in R[8];</li>
<li>Elongated R[8] rhabdomere;</li>
<li>A secondary orthogonality of the microvilli between MO[5,6].</li>
</ul>
]]></content>
      <categories>
        <category>neuroscience</category>
      </categories>
      <tags>
        <tag>mantis shrimp</tag>
        <tag>vision</tag>
        <tag>neuroscience</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Notes on Stomatopod&#39;s visual ability 3</title>
    <url>/2024/02/16/Notes-on-Stomatopod-s-visual-ability-3/</url>
    <content><![CDATA[<h1 id="Notes-on-Stomatopod’s-visual-ability-3"><a href="#Notes-on-Stomatopod’s-visual-ability-3" class="headerlink" title="Notes on Stomatopod’s visual ability: 3"></a>Notes on Stomatopod’s visual ability: 3</h1><h2 id="Summary-of-the-structure-of-Stomatopod’s-eye"><a href="#Summary-of-the-structure-of-Stomatopod’s-eye" class="headerlink" title="Summary of the structure of Stomatopod’s eye"></a>Summary of the structure of Stomatopod’s eye</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>The compound eye of a Stomatopod is a hemispherical structure connected to an eye stalk.</p>
<p>The compound eye consists of many ommatidia.</p>
<p>Each ommatidia is mainly consists of</p>
<ul>
<li><p>a cornea (facet) on the surface,</p>
</li>
<li><p>a crystalline cone underneath the cornea,</p>
</li>
<li><p>distal pigment cells surrounding the crystalline cones,</p>
</li>
<li><p>retinular cells (photoreceptor cells) underneath the crystalline cone.</p>
</li>
</ul>
<p>(Assume that the distal - proximal axis of an ommatidia is vertical, as is illustrated in <a href="https://michaellaw2003.github.io/2024/02/03/Notes-on-Stomatopod-s-visual-ability-2/">Notes on Stomatopod’s visual ability: 2</a> .)</p>
<p>6 rows of special ommatidia divides the hemispherical compound eye into two parts, namely dorsal and ventral hemispheres (DH &amp; VH).</p>
<p>These 6 rows of special ommatidia has larger cornea (facet), and are termed as mid-band ommatidia, designated as MO[1-6].</p>
<p>The cell membranes of retinular cells extend and form rhabdomeres, and the rhabdomeres form a bundle structure termed rhabdom. The rhabdom functions as a light guide.</p>
<p>The retinular cells are simply described as “rhabdom” in some documents.</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>There are 8 retinular cells in an ommatidia, whose shape and location are different to each other, designated as R[1-8].</p>
<p>DH &amp; VH retinular cells are divided into two layers (based on the shape of the cross section imaging), namely distal end layer and proximal end layer. All the 8 retinular cells in an ommatidia are present at each layer (tier) .</p>
<p>The distal end layer mainly consists of a single R[8] cell. The proximal end layer consists of R[1-7] cells, which form a flower-like ring structure, with the rhabdomeres at the center of the ring.</p>
<p>The retinular cells of MO[1-4] are three layered, with a distal end layer similar to that of DH &amp; VH ommatidia, but the proximal end layer are divided into two sub-layers.</p>
<p>All the R[1-7] cells are present in the two sub-layers at the proximal end. In MO[1,3,4], the R[1,4,5] cells are above the R[2,3,6,7], while in MO[2], the R[2,3,6,7] cells are above the R[1,4,5] cells.</p>
<p>All the R[1-8] cells construct the retinula with both small distal projections (microvilli) in the rhabdom, and the axons connected to the optic nerve centers.</p>
<p>The retinula of all the ommatidia consist retina.</p>
<h2 id="Notes-on-connectivity-of-optic-neuropils"><a href="#Notes-on-connectivity-of-optic-neuropils" class="headerlink" title="Notes on connectivity of optic neuropils"></a>Notes on connectivity of optic neuropils</h2><p><strong>Lamina ganglionaris</strong> (lamina) and <strong>medulla externa</strong> (ME), <strong>medulla interna</strong>(MI), <strong>medulla terminalis</strong>(NT) in the eye rod are optic neuropils in Stomatopods.(Marshall et al., 2007)</p>
<p>All optic neuropils have <strong>subdivisions</strong> reflecting subdivisions of the retina - DH, midband, VH.(Marshall et al., 2007)</p>
<p>The axons of the photorecepters project to the lamina, forming synapses with lamina monopolar cells LMCs.(This conclusion is from a paper introducing butterfly, and thus may be inaccurate for mantis shrimps.) (Matsushita et al., 2022)</p>
<p>On the way from basement membrane to the lamina, axons form <strong>fasicles</strong>, in which the arrangement of the axons twists 180°. The collection of axons and <strong>LMCs</strong> consists of a structure termed as the <strong>cartridge</strong>.(Marshall et al., 2007)</p>
<p>In the image of the section at the level of the lamina, the lamina cartridge of MO[5,6] are ovoid in shape, the MO[1-4] rectangular, and DH&#x2F;VH hexagonal.(Marshall et al., 2007)</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Marshall, J., Cronin, T. W., &amp; Kleinlogel, S. (2007). Stomatopod eye structure and function: a review. <em>Arthropod Struct Dev</em>, <em>36</em>(4), 420-448. <a href="https://doi.org/10.1016/j.asd.2007.01.006">https://doi.org/10.1016/j.asd.2007.01.006</a></p>
<p>Matsushita, A., Stewart, F., Ilić, M., Chen, P.-J., Wakita, D., Miyazaki, N., Murata, K., Kinoshita, M., Belušič, G., &amp; Arikawa, K. (2022). Connectome of the lamina reveals the circuit for early color processing in the visual pathway of a butterfly. <em>Current Biology</em>, <em>32</em>(10), 2291-2299.e2293. <a href="https://doi.org/10.1016/j.cub.2022.03.066">https://doi.org/10.1016/j.cub.2022.03.066</a> (Current Biology)</p>
]]></content>
      <categories>
        <category>neuroscience</category>
      </categories>
      <tags>
        <tag>mantis shrimp</tag>
        <tag>vision</tag>
        <tag>neuroscience</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Default Initiation</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basic%20Initiation/</url>
    <content><![CDATA[<h1 id="PyRosetta-Default-Initiation"><a href="#PyRosetta-Default-Initiation" class="headerlink" title="PyRosetta Default Initiation"></a>PyRosetta Default Initiation</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line">init() <span class="comment"># pyrosetta.rosetta.init() # We can pass in Rosetta commandlines here</span></span><br><span class="line"><span class="comment">#import pyrosetta</span></span><br><span class="line"><span class="comment">#pyrosetta.init()</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (2): PyMOL Mover</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(2)_%20PyMOL%20Mover/</url>
    <content><![CDATA[<h1 id="PyMOL-Mover"><a href="#PyMOL-Mover" class="headerlink" title="PyMOL Mover"></a>PyMOL Mover</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line">init()</span><br><span class="line"><span class="comment">#import pyrosetta</span></span><br><span class="line"><span class="comment">#pyrosetta.init()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_pose = pose_from_pdb(<span class="string">&quot;inputs/5tj3.pdb&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="https://www.pyrosetta.org/documentation/pymol_mover-tutorial">https://www.pyrosetta.org/documentation/pymol_mover-tutorial</a></p>
<h2 id="PyMOLMover-class"><a href="#PyMOLMover-class" class="headerlink" title="PyMOLMover class"></a><code>PyMOLMover</code> class</h2><p>The PyMOLMover class will let us send information from PyRosetta to PyMOL for quick visualization. </p>
<h3 id="Setup-PyMOL"><a href="#Setup-PyMOL" class="headerlink" title="Setup PyMOL"></a>Setup PyMOL</h3><h4 id="Get-Configuration-file-PyMOLPyRosettaServer-py-in-Linux"><a href="#Get-Configuration-file-PyMOLPyRosettaServer-py-in-Linux" class="headerlink" title="Get Configuration file: &lt;font style=&quot;color:rgb(33, 33, 33);background-color:rgba(0, 0, 0, 0.06);&quot;&gt;PyMOLPyRosettaServer.py&lt;/font&gt;(in Linux)"></a>Get Configuration file: <code>&lt;font style=&quot;color:rgb(33, 33, 33);background-color:rgba(0, 0, 0, 0.06);&quot;&gt;PyMOLPyRosettaServer.py&lt;/font&gt;</code>(in Linux)</h4><p><font style="color:rgb(33, 33, 33);background-color:rgba(0, 0, 0, 0.06);">PyMOLPyRosettaServer.py</font><font style="color:rgb(33, 33, 33);"> is found in the main directory of PyRosetta.</font></p>
<p><font style="color:rgb(33, 33, 33);">The path to PyRosetta can be discovered in the init information.</font></p>
<p><font style="color:rgb(33, 33, 33);">For example:</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Requirement already satisfied: pyrosettacolabsetup <span class="keyword">in</span> /home/michael2003/anaconda3/envs/DESIGN_PROTEIN/lib/python3.9/site-packages (1.0.9)</span><br><span class="line">┌──────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│                                 PyRosetta-4                                  │</span><br><span class="line">│              Created <span class="keyword">in</span> JHU by Sergey Lyskov and PyRosetta Team              │</span><br><span class="line">│              (C) Copyright Rosetta Commons Member Institutions               │</span><br><span class="line">│                                                                              │</span><br><span class="line">│ NOTE: USE OF PyRosetta FOR COMMERCIAL PURPOSES REQUIRE PURCHASE OF A LICENSE │</span><br><span class="line">│         See LICENSE.PyRosetta.md or email license@uw.edu <span class="keyword">for</span> details         │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">PyRosetta-4 2025 [Rosetta PyRosetta4.conda.ubuntu.cxx11thread.serialization.Ubuntu.python39.Release 2025.24+release.8e1e5e54f047b0833dcf760a5cd5d3ce94d63938 2025-06-06T09:20:57] retrieved from: http://www.pyrosetta.org</span><br><span class="line">core.init: Checking <span class="keyword">for</span> fconfig files <span class="keyword">in</span> <span class="built_in">pwd</span> and ./rosetta/flags</span><br><span class="line">core.init: Rosetta version: PyRosetta4.conda.ubuntu.cxx11thread.serialization.Ubuntu.python39.Release r403 2025.24+release.8e1e5e54f0 8e1e5e54f047b0833dcf760a5cd5d3ce94d63938 http://www.pyrosetta.org 2025-06-06T09:20:57</span><br><span class="line">core.init: Rosetta extras: [cxx11thread, serialization]</span><br><span class="line">core.init: <span class="built_in">command</span>: PyRosetta -ex1 -ex2aro -database /home/michael2003/anaconda3/envs/DESIGN_PROTEIN/lib/python3.9/site-packages/pyrosetta/database</span><br><span class="line">basic.random.init_random_generator: <span class="string">&#x27;RNG device&#x27;</span> seed mode, using <span class="string">&#x27;/dev/urandom&#x27;</span>, seed=-481462242 seed_offset=0 real_seed=-481462242 thread_index=0</span><br><span class="line">basic.random.init_random_generator: RandomGenerator:init: Normal mode, seed=-481462242 RG_type=mt19937</span><br></pre></td></tr></table></figure>

<p>In this example, path to PyRosetta is:</p>
<p><code>/home/michael2003/anaconda3/envs/DESIGN_PROTEIN/lib/python3.9/site-packages/pyrosetta/</code></p>
<h4 id="Copy-edit-the-configuration-file-in-Windows"><a href="#Copy-edit-the-configuration-file-in-Windows" class="headerlink" title="Copy &amp; edit the configuration file (in Windows)"></a>Copy &amp; edit the configuration file (in Windows)</h4><p>I’m using PyMol on Windows, and pyRosetta on WSL Ubuntu.</p>
<p>Therefore, I have to edit the <font style="color:rgb(33, 33, 33);background-color:rgba(0, 0, 0, 0.06);">PyMOLPyRosettaServer.py </font>file to appoint a correct IP address.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/networking">https://learn.microsoft.com/en-us/windows/wsl/networking</a></p>
<blockquote>
<p><font style="color:rgb(22, 22, 22);">A program running inside a Linux distribution via WSL2 (instance) wants to know the Windows host’s IP address, so that a Linux program can connect to a Windows host server program.</font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route show | grep -i default | awk <span class="string">&#x27;&#123; print $3&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>And a typical output might look like:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">172.24</span>.<span class="number">112.1</span></span><br></pre></td></tr></table></figure>

<p>Copy the <font style="color:rgb(33, 33, 33);background-color:rgba(0, 0, 0, 0.06);">PyMOLPyRosettaServer.py </font><font style="color:rgb(33, 33, 33);">  from Linux to Windows (to D:).</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> &lt;Path-to-PyRosetta&gt;/PyMOLPyRosettaServer.py /mnt/d/</span><br></pre></td></tr></table></figure>

<p>And edit the file according to the comments within it. (The IP configuration is in the last few lines.) Appoint the right remote IP, and appoint an available port (e.g. <code>65000</code>).</p>
<h4 id="Apply-the-PyMOLPyRosettaServer-py-to-PyMOL-in-Windows"><a href="#Apply-the-PyMOLPyRosettaServer-py-to-PyMOL-in-Windows" class="headerlink" title="Apply the PyMOLPyRosettaServer.py  to PyMOL (in Windows)"></a>Apply the <font style="color:rgb(33, 33, 33);background-color:rgba(0, 0, 0, 0.06);">PyMOLPyRosettaServer.py </font><font style="color:rgb(33, 33, 33);"> to PyMOL (in Windows)</font></h4><p>a. Drag the file to PyMOL window.</p>
<p>b. Or, run the following commands in the PyMOL command line.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D: <span class="comment">#Because I save PyMOLRosettaServer.py there.</span></span><br><span class="line">run PyMOLRosettaServer.py</span><br></pre></td></tr></table></figure>

<p>c. Or, save the commands above to <code>pymolrc.pml</code>; thus it runs automatically each time pyMOL launches<br>(The <code>pymolrc.pml</code>file can be found from GUI menu: <code>File</code> &gt;&gt; <code>Edit pymolrc</code>)</p>
<h3 id="Instantiation-of-PyMOLMover"><a href="#Instantiation-of-PyMOLMover" class="headerlink" title="Instantiation of PyMOLMover"></a>Instantiation of <code>PyMOLMover</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pmm = PyMOLMover(<span class="string">&quot;172.24.112.1&quot;</span>, <span class="number">65000</span>)</span><br></pre></td></tr></table></figure>



<h3 id="PyMOLMovermethods"><a href="#PyMOLMovermethods" class="headerlink" title="PyMOLMovermethods"></a><code>PyMOLMover</code>methods</h3><h4 id="Keep-history"><a href="#Keep-history" class="headerlink" title="Keep history"></a>Keep history</h4><p>The method <code>keep_history</code>, if set to True, allows you to load in structures with the same name into states of the same object in PyMOL. </p>
<p>This is the starting point for creating a PyMOL movie of your structure.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pmm.keep_history(<span class="literal">True</span>) <span class="comment"># This keeps history of all poses sent to PyMOL</span></span><br></pre></td></tr></table></figure>

<h4 id="Send-a-pose-object-to-PyMOL"><a href="#Send-a-pose-object-to-PyMOL" class="headerlink" title="Send a pose object to PyMOL"></a>Send a <code>pose</code> object to PyMOL</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pmm.apply(my_pose)</span><br><span class="line"><span class="comment"># After running this, my_pose is expected to show up in the PyMOL window</span></span><br></pre></td></tr></table></figure>

<p>See <code>AddPyMOLObserver</code>class for information about automatic updating the <em>pose</em> during <em>move.</em></p>
<h4 id="Send-energy-energy-across-every-residue-of-a-poseobject-to-PyMOL"><a href="#Send-energy-energy-across-every-residue-of-a-poseobject-to-PyMOL" class="headerlink" title="Send energy (energy across every residue) of a poseobject to PyMOL"></a>Send energy (energy across every residue) of a <code>pose</code>object to PyMOL</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assume that `pmm` is an instance of `PyMOLMover`</span></span><br><span class="line"><span class="comment"># assume that `my_pose` is an instance of `Pose`</span></span><br><span class="line">pmm.send_energy(my_pose) <span class="comment"># visualize the distribution of energy across the structure</span></span><br><span class="line">pmm.send_energy(my_pose, fa_sol) <span class="comment"># visualize the distribution of solvation energy (of full atom energy landscape) across the structure</span></span><br></pre></td></tr></table></figure>

<h4 id="Send-properties-of-the-poseobject-to-PyMOL"><a href="#Send-properties-of-the-poseobject-to-PyMOL" class="headerlink" title="Send properties of the poseobject to PyMOL"></a>Send properties of the <code>pose</code>object to PyMOL</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if you have scored the pose first, you can:</span></span><br><span class="line">pmm.send_hbonds(my_pose) <span class="comment">#show all hydrogen bonds in PyMOL</span></span><br></pre></td></tr></table></figure>

<h2 id="AddPyMOLObserverclass"><a href="#AddPyMOLObserverclass" class="headerlink" title="AddPyMOLObserverclass"></a><code>AddPyMOLObserver</code>class</h2><p><font style="color:rgba(0, 0, 0, 0.87);">The observer is configured to execute a </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;PyMOLMover.apply()&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> every time a change is observed in the pose coordinates. The </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;True&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> is a flag to ensure that PyMOL keeps a history of the moves.</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">The observer should be added before excuting the </font><em><font style="color:rgba(0, 0, 0, 0.87);">move(s).</font></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">observer = pyrosetta.rosetta.protocols.moves.AddPyMOLObserver(my_pose, <span class="literal">True</span>)</span><br><span class="line">my_mover.apply(my_pose)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (4): Rosetta Scripts Parser</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(4)_%20Rosetta%20Scripts%20Parser/</url>
    <content><![CDATA[<h1 id="PyRosetta-Basics-4-Rosetta-Scripts-Parser"><a href="#PyRosetta-Basics-4-Rosetta-Scripts-Parser" class="headerlink" title="PyRosetta Basics (4): Rosetta Scripts Parser"></a>PyRosetta Basics (4): Rosetta Scripts Parser</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip install pyrosettacolabsetup</span><br><span class="line"><span class="keyword">import</span> pyrosettacolabsetup; pyrosettacolabsetup.install_pyrosetta()</span><br><span class="line"><span class="keyword">import</span> pyrosetta; pyrosetta.init()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rosetta.protocols.rosetta_scripts <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">init(<span class="string">&#x27;-no_fconfig @inputs/rabd/common&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>rosetta.protocols.rosetta_scripts.RosettaScriptsParser</code>parses a Rosetta Script so that it can be called in PyRosetta.</p>
<p>Rosetta Scripts are in XML format.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ROSETTASCRIPTS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SCOREFXNS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SCOREFXNS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RESIDUE_SELECTORS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RESIDUE_SELECTORS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TASKOPERATIONS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TASKOPERATIONS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SIMPLE_METRICS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SIMPLE_METRICS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FILTERS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FILTERS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MOVERS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MOVERS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PROTOCOLS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PROTOCOLS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OUTPUT</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ROSETTASCRIPTS</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Rosetta will carry out the order of operations specified in <code>&lt;PROTOCOLS&gt;&lt;/PROTOCOLS&gt;</code>. </p>
<p>SimpleMetrics (<code>&lt;SIMPLE_METRICS&gt;&lt;/SIMPLE_METRICS&gt;</code>) and Filters (<code>&lt;FILTERS&gt;&lt;/FILTERS&gt;</code>) do not change the sequence or conformation of the structure.</p>
<p>The movers (<code>&lt;MOVERS&gt;&lt;/MOVERS&gt;</code>) do change the pose, and the output file will be the result of sequentially applying the movers in the protocols section. </p>
<p>The standard scores of the output will be carried over from any protocol doing scoring, unless the OUTPUT tag (<code>&lt;OUTPUT&gt;&lt;/OUTPUT&gt;</code>) is specified, in which case the corresponding score function from the <code>&lt;SCOREFXNS&gt;&lt;/SCOREFXNS&gt;</code> block will be used. </p>
<h2 id="Instantiation"><a href="#Instantiation" class="headerlink" title="Instantiation"></a>Instantiation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_parser = RosettaScriptsParser()</span><br><span class="line"><span class="comment"># my_parser is an instanse of `RosettaScriptsParser`</span></span><br><span class="line">my_pose = pose_from_pdb(<span class="string">&quot;inputs/rabd/my_ab.pdb&quot;</span>)</span><br><span class="line"><span class="comment"># my_pose is an instance of `Pose`; it is generated by calling `pyrosetta.pose_from_pdb`</span></span><br><span class="line">my_pose_clone = my_pose.clone()</span><br><span class="line"><span class="comment"># Always clone a copy as an archive before editing</span></span><br></pre></td></tr></table></figure>

<h2 id="Load-a-protocol"><a href="#Load-a-protocol" class="headerlink" title="Load a protocol"></a>Load a protocol</h2><h3 id="Load-from-file"><a href="#Load-from-file" class="headerlink" title="Load from file"></a>Load from file</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load from file</span></span><br><span class="line">my_protocol = parser.generate_mover(<span class="string">&quot;inputs/min_L1.xml&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Load-from-string-construct-a-XML-object"><a href="#Load-from-string-construct-a-XML-object" class="headerlink" title="Load from string (construct a XML object)"></a>Load from string (construct a <code>XML</code> object)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">min_L1 = <span class="string">&quot;&lt;ROSETTASCRIPTS&gt;...&lt;/ROSETTASCRIPTS&gt;&quot;</span> <span class="comment"># min_L1 is a string that is in XML format</span></span><br><span class="line">xml = XmlObjects.create_from_string(min_L1)</span><br><span class="line">my_protocol = xml.get_mover(<span class="string">&quot;ParsedProtocol&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Apply-a-protocol"><a href="#Apply-a-protocol" class="headerlink" title="Apply a protocol"></a>Apply a protocol</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_protocol.apply(my_pose)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (3): Viewer</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(3)_%20Viewer/</url>
    <content><![CDATA[<h1 id="PyRosetta-Basics-3-Viewer"><a href="#PyRosetta-Basics-3-Viewer" class="headerlink" title="PyRosetta Basics (3): Viewer"></a>PyRosetta Basics (3): Viewer</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The pyrosetta.distributed Viewer quickly renders <code>.pdb</code> files, dynamically instantiating Pose objects if required for certain visualization modules (<code>viewer.set*</code>). </p>
<p>So when adding visualization modules to the Viewer or using presets, passing Pose or PackedPose objects to the Viewer is suggested for quicker rendering. </p>
<p>If a Pose object or list, tuple, or set of Pose objects are provided to the Viewer, the Viewer will dynamically update upon Pose conformational changes by calling the view.show() method or equivalently view(). </p>
<p>The Viewer applies visualization modules in the same order they are added (from left to right), so layering different styles (and ResidueSelectors) on top of one another becomes possible. </p>
<p><font style="color:#DF2A3F;">WARNING</font>: <code>pyrosetta.distributed.viewer</code>runs in a jupyter notebook.</p>
<h2 id="Initialization-load"><a href="#Initialization-load" class="headerlink" title="Initialization &amp; load"></a>Initialization &amp; load</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip install pyrosettacolabsetup</span><br><span class="line"><span class="keyword">import</span> pyrosettacolabsetup; pyrosettacolabsetup.install_pyrosetta()</span><br><span class="line"><span class="keyword">import</span> pyrosetta; </span><br><span class="line">pyrosetta.init()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pyrosetta</span><br><span class="line"><span class="keyword">import</span> pyrosetta.distributed</span><br><span class="line"><span class="keyword">import</span> pyrosetta.distributed.io <span class="keyword">as</span> io</span><br><span class="line"><span class="keyword">import</span> pyrosetta.distributed.viewer <span class="keyword">as</span> viewer</span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_pose = pyrosetta.io.pose_from_file(<span class="string">&quot;inputs/3EK4.pdb&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Configuring-ditributedfor-visualizing-ligands-and-non-canonical-residues"><a href="#Configuring-ditributedfor-visualizing-ligands-and-non-canonical-residues" class="headerlink" title="Configuring ditributedfor visualizing ligands and non-canonical residues"></a>Configuring <code>ditributed</code>for visualizing ligands and non-canonical residues</h2><p>The user must have already initialized PyRosetta providing <code>.params</code> for any ligands and non-canonical residues in the input <code>Pose</code>objects &#x2F;<code>PackedPose</code>objects&#x2F;<code>.pdb</code> files.</p>
<p>Otherwise <code>pyrosetta.distributed</code> automatically initializes PyRosetta with default command line options.</p>
<p>E.g.:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flags = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-auto_setup_metals 1</span></span><br><span class="line"><span class="string">-detect_disulf 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># Display metal: True</span></span><br><span class="line"><span class="comment"># Display disulfide bonds: True</span></span><br><span class="line">pyrosetta.distributed.init(flags)</span><br></pre></td></tr></table></figure>

<h2 id="Instantiation-of-distributed-viewer"><a href="#Instantiation-of-distributed-viewer" class="headerlink" title="Instantiation of distributed.viewer"></a>Instantiation of <code>distributed.viewer</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">view = viewer.init(pose, window_size=(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">view()</span><br></pre></td></tr></table></figure>

<h2 id="distributed-viewermethods"><a href="#distributed-viewermethods" class="headerlink" title="distributed.viewermethods"></a><code>distributed.viewer</code>methods</h2><p>The pyrosetta.distributed Viewer quickly renders <code>.pdb</code> files, dynamically instantiating Pose objects if required for certain visualization modules (<code>viewer.set*</code>). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># All Available `viewer` objects:</span></span><br><span class="line">viewer.__all__</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">[&#x27;expand_notebook&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;init&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;presets&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setBackgroundColor&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setDisulfides&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setHydrogenBonds&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setHydrogens&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setStyle&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setSurface&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setZoom&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;setZoomTo&#x27;]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>visualization modules: <code>viewer.set*</code></li>
<li>visualization presets: <code>viewer.presets</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">viewer.presets.__all__</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; [&#x27;coreBoundarySurface&#x27;, &#x27;ligandsAndMetals&#x27;]</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>pyrosetta.distributed.viewer.expand_notebook()</code> expands the Jupyter notebook cell width to fit your internet browser</li>
</ol>
]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (1): Pose</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(1)_%20Pose/</url>
    <content><![CDATA[<h1 id="PyRosetta-Basics-1-Pose"><a href="#PyRosetta-Basics-1-Pose" class="headerlink" title="PyRosetta Basics (1): Pose"></a>PyRosetta Basics (1): Pose</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line">init()</span><br><span class="line"><span class="comment">#import pyrosetta</span></span><br><span class="line"><span class="comment">#pyrosetta.init()</span></span><br></pre></td></tr></table></figure>

<h2 id="Poseclass"><a href="#Poseclass" class="headerlink" title="Poseclass"></a><code>Pose</code>class</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ol>
<li>Simplified explanation: <ol>
<li><code>Pose</code>(<code>pyrosetta.Pose</code>) is defined as a Python class</li>
<li><code>Pose</code>is the core concept of PyRosetta</li>
<li>An instance of the<code>Pose</code>class is refered to as a “pose object”.</li>
<li>A pose object is a protein structure.</li>
</ol>
</li>
<li>Further explanation:<ol>
<li>A pose object may also include informations about related ions, ligand and other molecules.</li>
<li>A pose object may have more than one protein chains (quaternary protein, or protein complex)</li>
<li>Like any other Python classes, the<code>Pose</code>class has methods and attributes.</li>
<li>Class methods can be visited from the instances of the class.</li>
</ol>
</li>
</ol>
<h3 id="Pose-instantiation"><a href="#Pose-instantiation" class="headerlink" title="Pose instantiation"></a><code>Pose</code> instantiation</h3><h4 id="Initiate-an-instance-of-Pose-from-a-PDB-file"><a href="#Initiate-an-instance-of-Pose-from-a-PDB-file" class="headerlink" title="Initiate an instance of Pose from a PDB file"></a>Initiate an instance of <code>Pose</code> from a PDB file</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pose_1 = pose_from_pdb(<span class="string">&quot;./path_to_pdb/5tj3.pdb&quot;</span>) </span><br><span class="line"><span class="comment"># pyrosetta.pose_from_pdb</span></span><br><span class="line"><span class="comment"># load &#x27;5tj3.pdb&#x27; from file</span></span><br></pre></td></tr></table></figure>

<h4 id="Initiate-an-instance-of-Pose-from-https-www-rcsb-org"><a href="#Initiate-an-instance-of-Pose-from-https-www-rcsb-org" class="headerlink" title="Initiate an instance of Pose from https://www.rcsb.org/"></a>Initiate an instance of <code>Pose</code> from <a href="https://www.rcsb.org/">https://www.rcsb.org/</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pose_2 = pose_from_rcsb(<span class="string">&quot;5TJ3&quot;</span>)</span><br><span class="line"><span class="comment"># pyrosetta.pose_from_rcsb</span></span><br><span class="line"><span class="comment"># load 5TJ3 from online database</span></span><br></pre></td></tr></table></figure>

<h4 id="Initiate-an-instance-of-Posefrom-a-string-a-sequence"><a href="#Initiate-an-instance-of-Posefrom-a-string-a-sequence" class="headerlink" title="Initiate an instance of Posefrom a string (a sequence)"></a>Initiate an instance of <code>Pose</code>from a string (a sequence)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pose_3 = pose_from_sequence(<span class="string">&quot;AAAAAAAAAA&quot;</span>)</span><br><span class="line"><span class="comment"># pyrosetta.pose_from_sequence</span></span><br><span class="line"><span class="comment"># load a &quot;poly alanine sequence&quot; from string</span></span><br></pre></td></tr></table></figure>

<h4 id="Initiate-an-empty-instance-of-Pose-And-create-a-clone-of-a-pose-object"><a href="#Initiate-an-empty-instance-of-Pose-And-create-a-clone-of-a-pose-object" class="headerlink" title="Initiate an empty instance of Pose (And create a clone of a pose object)"></a>Initiate an empty instance of <code>Pose</code> (And create a clone of a <code>pose</code> object)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pose_4 = Pose() <span class="comment"># Now pose_4 is empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we can now use pose_4 to create a deep clone (copy) of pose_1</span></span><br><span class="line">pose_4.assign(pose_1)</span><br></pre></td></tr></table></figure>

<h3 id="Posemethods"><a href="#Posemethods" class="headerlink" title="Posemethods"></a><code>Pose</code>methods</h3><h4 id="Copy-a-poseobject-via-Pose-assign"><a href="#Copy-a-poseobject-via-Pose-assign" class="headerlink" title="Copy a poseobject via Pose.assign"></a>Copy a <code>pose</code>object via <code>Pose.assign</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a Pose instance called `my_pose`</span></span><br><span class="line">my_pose_clone = Pose() <span class="comment"># Now my_pose_clone is empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#create a deep clone (copy) of my_pose</span></span><br><span class="line">my_pose_clone.assign(my_pose)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font style="color:#DF2A3F;">WARNING</font>: Avoid writing something like:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_pose_clone = my_pose </span><br><span class="line"><span class="comment"># This is incorrect</span></span><br></pre></td></tr></table></figure>

<p>Because in this way, my_pose_clone is pointed to value of my_pose, and modification to my_pose_clone will change my_pose.</p>
<h4 id="Copy-a-poseobject-via-Pose-clone"><a href="#Copy-a-poseobject-via-Pose-clone" class="headerlink" title="Copy a poseobject via Pose.clone"></a>Copy a <code>pose</code>object via <code>Pose.clone</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assume that we have a `pose` object called `my_pose`</span></span><br><span class="line">my_pose_clone = my_pose.clone()</span><br></pre></td></tr></table></figure>

<h4 id="Get-sequence"><a href="#Get-sequence" class="headerlink" title="Get sequence"></a>Get sequence</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `my_pose` is an instance of Pose</span></span><br><span class="line">my_seq = my_pose.sequence()</span><br><span class="line"><span class="comment"># `my_seq` is a string, storing the sequence of my_pose</span></span><br></pre></td></tr></table></figure>

<h4 id="Get-annotated-sequence"><a href="#Get-annotated-sequence" class="headerlink" title="Get annotated sequence"></a>Get annotated sequence</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_seq_annotated = my_pose.annotated_sequence()</span><br><span class="line"><span class="comment"># `my_seq` is a string, storing the annotated sequence of my_pose</span></span><br><span class="line"><span class="comment"># annotations are like: &#x27;...T[THR:phosphorylated]...&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Get-total-residue-count"><a href="#Get-total-residue-count" class="headerlink" title="Get total residue count"></a>Get total residue count</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_total_residue_count = my_pose.total_residue()</span><br><span class="line"><span class="comment"># `my_total_residue_count` is an integer</span></span><br></pre></td></tr></table></figure>

<h4 id="Get-dihedral-angles"><a href="#Get-dihedral-angles" class="headerlink" title="Get dihedral angles"></a>Get dihedral angles</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `residue_id` is the ID (in pose) of a residue, type is integer</span></span><br><span class="line">my_pose.phi(residue_id) <span class="comment"># C-CaN-C dihedral</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; −64.8</span></span><br><span class="line">my_pose.psi(residue_id) <span class="comment"># N-CaC-N dihedral</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; -41.0</span></span><br><span class="line">my_pose.chi(<span class="number">1</span>, residue_id) <span class="comment"># 1st C-C dihedral in side chain</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; -82.8</span></span><br></pre></td></tr></table></figure>

<h4 id="Get-an-Energiesobject"><a href="#Get-an-Energiesobject" class="headerlink" title="Get an Energiesobject"></a>Get an <code>Energies</code>object</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_energies = my_pose.energies()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_energies.show(<span class="number">24</span>)) <span class="comment"># Print all energies terms (unweighted) of residue 24</span></span><br></pre></td></tr></table></figure>

<h4 id="Get-aResidue-object"><a href="#Get-aResidue-object" class="headerlink" title="Get aResidue object"></a>Get a<code>Residue</code> object</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">residue_20th = my_pose.residue(<span class="number">20</span>)</span><br><span class="line"><span class="comment"># `residue_20th` is an object that stores the 20th residue of `my_pose`</span></span><br></pre></td></tr></table></figure>

<p>See “Residue objects” in this note </p>
<p><font style="color:#DF2A3F;">WARNING</font>: “the 20th residue in pose” is not equal to “the 20th residue in PDB”, because a pdb file may contain more than one chain.</p>
<h4 id="Get-aPdbInfoobject"><a href="#Get-aPdbInfoobject" class="headerlink" title="Get aPdbInfoobject"></a>Get a<code>PdbInfo</code>object</h4><p>This object is a bridge between a <code>Pose</code> object and a PDB file:</p>
<ol>
<li>This object stores information from the original PDB file (if the pose is from a pdb file or from the pdb database).</li>
<li>Or, this object stores information that can be written into a PDB file.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_pdb_info = my_pose.pdb_info()</span><br></pre></td></tr></table></figure>

<p>See “PdbInfo objects” in this note </p>
<h4 id="Get-aConformationobject"><a href="#Get-aConformationobject" class="headerlink" title="Get aConformationobject"></a>Get a<code>Conformation</code>object</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_conformation = my_pose.conformation() <span class="comment"># Get conformation object</span></span><br></pre></td></tr></table></figure>

<h4 id="Set-dihedral-angles-a-basic-mover"><a href="#Set-dihedral-angles-a-basic-mover" class="headerlink" title="Set dihedral angles (a basic mover)"></a>Set dihedral angles (a basic mover)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_pose.set_phi(<span class="number">24</span>, -<span class="number">64.8</span>) <span class="comment"># set phi of residue #24 to -64.8</span></span><br><span class="line">my_pose.set_psi(<span class="number">24</span>, -<span class="number">41.0</span>) <span class="comment"># set psi of residue #24 to -41.0</span></span><br></pre></td></tr></table></figure>

<h4 id="Set-foldtree-requires-a-pre-defined-FoldTreeobject"><a href="#Set-foldtree-requires-a-pre-defined-FoldTreeobject" class="headerlink" title="Set foldtree (requires a pre-defined FoldTreeobject)"></a>Set foldtree (requires a pre-defined <code>FoldTree</code>object)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a `FoldTree` object called `my_ft`</span></span><br><span class="line">my_pose.fold_tree(my_ft)</span><br></pre></td></tr></table></figure>

<h4 id="Output-Save-a-pose-as-a-PDB-file"><a href="#Output-Save-a-pose-as-a-PDB-file" class="headerlink" title="Output (Save) a pose as a PDB file"></a>Output (Save) a pose as a PDB file</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_pose.dump_pdb(<span class="string">&#x27;/outputs/my_pose_arxiv.pdb&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Residue-class"><a href="#Residue-class" class="headerlink" title="Residue class"></a><code>Residue</code> class</h2><p><code>Residue</code>is a secondary class of <code>Pose</code>.</p>
<p>A <code>residue</code>object stores information about a residue.</p>
<p><font style="color:#DF2A3F;">NOTICE</font>: An ion, or a small molecule ligand, etc. is also seen as a residue.</p>
<h3 id="Get-residue-name"><a href="#Get-residue-name" class="headerlink" title="Get residue name"></a>Get residue name</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">residue_20th = my_pose.residue(<span class="number">20</span>)</span><br><span class="line"><span class="comment"># my_pose is a `Pose` object</span></span><br><span class="line"><span class="comment"># residue_20th is a `Residue` object</span></span><br><span class="line">residue_20th_name = residue_20th.name()</span><br><span class="line"><span class="comment"># residue_20th_name is a string, storing the uppercased 3-letter name</span></span><br><span class="line"><span class="comment"># e.g. &#x27;ASP&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Get-residue-property-is-xxxbooleans"><a href="#Get-residue-property-is-xxxbooleans" class="headerlink" title="Get residue property: is_xxxbooleans"></a>Get residue property: <code>is_xxx</code>booleans</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">residue_24th = my_pose.residue(<span class="number">24</span>) <span class="comment"># Get #24 residue from my_pose</span></span><br><span class="line">residue_24th_is_charged = residue_24th.is_charged() <span class="comment"># Boolean, `True` if it is charged</span></span><br><span class="line">residue_24th_is_aa = residue_24th.is_protein() <span class="comment"># Boolean, `True` if it is an amino acid</span></span><br></pre></td></tr></table></figure>

<h3 id="Get-atom-index"><a href="#Get-atom-index" class="headerlink" title="Get atom index"></a>Get atom index</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">residue_24th = my_pose.residue(<span class="number">24</span>) <span class="comment"># get #24 residue</span></span><br><span class="line">carbon_alpha_of_residue_24th = residue_24th.atom_index(<span class="string">&quot;CA&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>&quot;N&quot;</code>is the nitrogen of main-chain amino group.</p>
<p><code>&quot;CA&quot;</code>is the central carbon.</p>
<p><code>&quot;C&quot;</code>is the carbon of main-chain carboxyl group.</p>
<p>For atom nomenclatures, search for “amino acid structure”.</p>
<h3 id="Get-atom-xyz-coordinates-for-vector-related-calculations"><a href="#Get-atom-xyz-coordinates-for-vector-related-calculations" class="headerlink" title="Get atom xyz coordinates (for vector-related calculations)"></a>Get atom xyz coordinates (for vector-related calculations)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `residue_24th` is a residue in `my_pose`</span></span><br><span class="line">N_xyz = residue_24th.xyz(<span class="string">&quot;N&quot;</span>)</span><br><span class="line"><span class="comment"># N_xyz is a vector (length = 3)</span></span><br></pre></td></tr></table></figure>



<h2 id="PdbInfoclass"><a href="#PdbInfoclass" class="headerlink" title="PdbInfoclass"></a><code>PdbInfo</code>class</h2><p><code>PdbInfo</code>is a secondary class of <code>Pose</code>.</p>
<p>This class is a bridge between a <code>Pose</code> object and a PDB file:</p>
<ol>
<li>A <code>pdb_info</code>object stores information from the original PDB file (if the pose is from a pdb file or from the pdb database).</li>
<li>Or, this object stores information that can be written into a PDB file.</li>
</ol>
<h3 id="Convert-residue-ID-number-pdb2pose-and-pose2pdb"><a href="#Convert-residue-ID-number-pdb2pose-and-pose2pdb" class="headerlink" title="Convert residue ID (number): pdb2pose and pose2pdb"></a>Convert residue ID (number): <code>pdb2pose</code> and <code>pose2pdb</code></h3><p>The ID (number) of a residue starts at #1 in pose.</p>
<p>The ID of a residue in a <code>pose</code>object is different from its ID in a <code>.pdb</code>file.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In PDB file, a residue of interect is in &quot;chain A&quot;, and its ID (number) in the PDB file is 24</span></span><br><span class="line"><span class="comment"># But its ID in the `Pose` object (my_pose) is unknown.</span></span><br><span class="line">my_pdb_info = my_pose.pdb_info()</span><br><span class="line">my_residue_id_in_pose = my_pdb_info.pdb2pose(<span class="string">&#x27;A&#x27;</span>, <span class="number">24</span>) <span class="comment"># get the residue ID in pose, stored as an integer</span></span><br><span class="line">my_residue = my_pose.residue(my_residue_id_in_pose) <span class="comment"># get the `Residue` object by its ID in pose</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alternatively, we can call the methods in a chain: </span></span><br><span class="line"><span class="comment"># my_residue_id_in_pose = my_pose.pdb_info().pdb2pose(&#x27;A&#x27;, 24)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># On the other hand, we can get the corresponding PDB chain infomation and ID information for a specific residue</span></span><br><span class="line"><span class="comment"># In a `Pose` object, a residue is at #1 position (its ID is 1), but its location in corresponding PDB file is unknown</span></span><br><span class="line">my_residue_info_in_pdb = my_pdb_info.pose2pdb(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># my_residue_info_in_pdb is a string that looks like &#x27;24 A&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Get-chain-information-Get-number-ID-information"><a href="#Get-chain-information-Get-number-ID-information" class="headerlink" title="Get chain information &amp; Get number (ID) information"></a>Get chain information &amp; Get number (ID) information</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a `Pose` instance called `my_pose`, and a residue of interest whose ID (in pose) is 1</span></span><br><span class="line">my_pose.pdb_info().chain(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; A</span></span><br><span class="line"><span class="comment"># The #1 residue is in &#x27;chain A&#x27;</span></span><br><span class="line">my_pose.pdb_info().number(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; 24</span></span><br><span class="line"><span class="comment"># The ID of #1 (in pose) residue in corresponding PDB file is 24</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-PdbInfo"><a href="#Set-PdbInfo" class="headerlink" title="Set PdbInfo"></a>Set <code>PdbInfo</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assume that my_pose is a `pose` object</span></span><br><span class="line">my_pose.pdb_info().name(<span class="string">&quot;test&quot;</span>) </span><br><span class="line"><span class="comment"># set the name of this pose in its pdb_info as &quot;test&quot;</span></span><br><span class="line"><span class="comment"># if it is sent to PyMOL, it will be displayed as &quot;test&quot; in the object list</span></span><br></pre></td></tr></table></figure>

<h2 id="Conformationclass"><a href="#Conformationclass" class="headerlink" title="Conformationclass"></a><code>Conformation</code>class</h2><h3 id="Get-bond-length-Get-bond-angle"><a href="#Get-bond-length-Get-bond-angle" class="headerlink" title="Get bond length &amp; Get bond angle"></a>Get bond length &amp; Get bond angle</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># given a `residue_id` (ID of a residue):</span></span><br><span class="line">residue_28th = my_pose.residue(residue_id) <span class="comment"># Get residue </span></span><br><span class="line">N28 = AtomID(residue_28th.atom_index(<span class="string">&quot;N&quot;</span>), residue_id) <span class="comment"># Construct an `AtomID` object for backbone nitrogen</span></span><br><span class="line">CA28 = AtomID(residue_28th.atom_index(<span class="string">&quot;CA&quot;</span>), residue_id)</span><br><span class="line">C28 = AtomID(res_28.atom_index(<span class="string">&quot;C&quot;</span>), resid)</span><br><span class="line"></span><br><span class="line">my_conformation = my_pose.conformation() <span class="comment"># Get conformation object</span></span><br><span class="line"></span><br><span class="line">N_CA_28_bond_length = my_conformation.bond_length(N28, CA28) <span class="comment"># get bond length; type is float</span></span><br><span class="line">bb_angle = my_conformation.bond_angle(N28, CA28, C28) <span class="comment"># get bond angle; type is float; in degree</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (6): Movers for Backbone Folding</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(6)_%20Movers%20for%20Backbone%20Folding/</url>
    <content><![CDATA[<h1 id="PyRosetta-Basics-6-Movers-for-Backbone-Folding"><a href="#PyRosetta-Basics-6-Movers-for-Backbone-Folding" class="headerlink" title="PyRosetta Basics (6): Movers for Backbone Folding"></a>PyRosetta Basics (6): Movers for Backbone Folding</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip install pyrosettacolabsetup</span><br><span class="line"><span class="keyword">import</span> pyrosettacolabsetup; pyrosettacolabsetup.install_pyrosetta()</span><br><span class="line"><span class="keyword">import</span> pyrosetta; pyrosetta.init()</span><br><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.teaching <span class="keyword">import</span> *</span><br><span class="line">init()</span><br></pre></td></tr></table></figure>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>One of the most basic operations in protein structure and design algorithms is manipulation of the protein conformation. </p>
<p>In Rosetta, these manipulations are organized into <code>mover</code>s. </p>
<p>A <code>Mover</code> object simply changes the conformation of a given pose. </p>
<p>It can be simple, like a single φ or ψ angle change, or complex, like an entire refinement protocol.</p>
<p><a href="https://docs.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/Movers/Movers-RosettaScripts">Movers (RosettaScripts)</a></p>
<h2 id="MoveMapclass"><a href="#MoveMapclass" class="headerlink" title="MoveMapclass"></a><code>MoveMap</code>class</h2><p><font style="color:rgba(0, 0, 0, 0.87);">Most </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;Movers&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> require a </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;MoveMap&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> object to specify which degrees of freedom are fixed and which are free to change. </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">Example1:</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_movemap = MoveMap()</span><br><span class="line">my_movemap.set_bb(<span class="literal">True</span>) <span class="comment"># Allowing a mover to change the backbone structure</span></span><br></pre></td></tr></table></figure>

<p>Example2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">movemap.set_bb(<span class="literal">False</span>) <span class="comment"># Prohibit a mover to change the backbone structure</span></span><br><span class="line">movemap.set_bb(<span class="number">50</span>, <span class="literal">True</span>) <span class="comment"># Allow a mover to chage the backbone structure of residue #50</span></span><br><span class="line">movemap.set_bb(<span class="number">51</span>, <span class="literal">True</span>) <span class="comment"># Allow a mover to chage the backbone structure of residue #51</span></span><br><span class="line"><span class="comment"># Only the backbone structure at residue #50 and #51 can be modified by a mover</span></span><br></pre></td></tr></table></figure>

<h2 id="Basic-Backbone-Folding-Process"><a href="#Basic-Backbone-Folding-Process" class="headerlink" title="Basic Backbone Folding Process"></a>Basic Backbone Folding Process</h2><h3 id="Making-a-trial-move"><a href="#Making-a-trial-move" class="headerlink" title="Making a trial move"></a><font style="color:rgba(0, 0, 0, 0.87);">Making a trial move</font></h3><p>Apply a <em>move</em> (change) to the <em>pose</em> (structure).</p>
<h3 id="Scoring-the-move"><a href="#Scoring-the-move" class="headerlink" title="Scoring the move"></a>Scoring the move</h3><p>Compare the energy scores before and after the move. </p>
<p>(Therefore, the pose should be cloned as a backup before the move.)</p>
<p>And, compare the energy score after the <em>move</em> and the lowest energy score in history. </p>
<p>If the score after this <em>move</em> is the lowest, store the _pose <em>after this</em> move _as the best pose, and renew the lowest energy score in history.</p>
<h3 id="Desiding-whether-or-not-to-accept-the-move"><a href="#Desiding-whether-or-not-to-accept-the-move" class="headerlink" title="Desiding whether or not to accept the move"></a>Desiding whether or not to accept the move</h3><p>For the** **decision step, we need to make a subroutine that either accepts or rejects the new conformatuon based on the <strong>Metropolis criterion</strong>. </p>
<p>The difference between the energy scores after (t+1) and before (t) a move is $ \Delta E &#x3D; E_{t+1} - E_{t} $.</p>
<p>The Metropolis criterion has a probability of accepting a move as $ P &#x3D; \exp( -\Delta E &#x2F; kT ) $.</p>
<p>When $ ΔE ≥ 0 $, the Metropolis criterion probability of accepting the move is $ P &#x3D; \exp( -\Delta E &#x2F; kT ) $.</p>
<p>When $ ΔE &lt; 0 $, the Metropolis criterion probability of accepting the move is $ P &#x3D; 1 $. </p>
<p>Use $ kT &#x3D; 1 \text{\ Rosetta \ Energy \ Unit \ (REU)} $ . </p>
<p><font style="color:#DF2A3F;">NOTICE</font>: Search “Boltzmann function” and “Simulated annealing” for more information about $ kT $.</p>
<p>If the move is accepted, the <em>pose</em> after the <em>move</em> will be used for the next round of trial <em>move.</em></p>
<p>If not, the <em>pose</em> before the _move _will be used for the next round of trial <em>move</em>.</p>
<h3 id="Iterations"><a href="#Iterations" class="headerlink" title="Iterations"></a>Iterations</h3><p>For each iteration, the 3 steps above are excuted. </p>
<p>The final output of this program should be the <strong>lowest energy conformation</strong> that is achieved <strong>at any point</strong> during the simulation. </p>
<p><font style="color:#DF2A3F;">NOTICE</font>: Search “greedy algorithm” and “Monte Carlo” for more information about the algorithm design. </p>
<h2 id="Basic-backbone-movers"><a href="#Basic-backbone-movers" class="headerlink" title="Basic backbone movers"></a>Basic backbone movers</h2><h3 id="SmallMover-ShearMover-classes"><a href="#SmallMover-ShearMover-classes" class="headerlink" title="SmallMover &amp; ShearMover classes"></a><code>SmallMover</code> &amp; <code>ShearMover</code> classes</h3><table>
<thead>
<tr>
<th><strong>Mover</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>SmallMover</code></td>
<td>Makes “small-move-style” torsion moves (no propagation minimization)</td>
</tr>
<tr>
<td><code>ShearMover</code></td>
<td>Makes “shear-style” torsion moves that <strong>minimize downstream propagation</strong></td>
</tr>
</tbody></table>
<p><font style="color:rgba(0, 0, 0, 0.87);">For convenience, the </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;SmallMover&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> and </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;ShearMover&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> can do multiple rounds of perturbation. </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">They also check that the new φ&#x2F;ψ combinations are within an allowable region of the </font><strong><font style="color:rgba(0, 0, 0, 0.87);">Ramachandran plot</font></strong><font style="color:rgba(0, 0, 0, 0.87);"> by using a </font><strong><font style="color:rgba(0, 0, 0, 0.87);">Metropolis acceptance criterion</font></strong><font style="color:rgba(0, 0, 0, 0.87);"> based on the rama score component change. (The </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;rama&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> score is a statistical score from Simons et al. 1999, parametrized by bins of φ&#x2F;ψ space.) </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">Because they use the Metropolis criterion, we must also supply </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);&quot;&gt;kT&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);">.</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kT = <span class="number">1.0</span> <span class="comment"># temperature</span></span><br><span class="line">n_moves = <span class="number">1</span> <span class="comment"># iterations</span></span><br><span class="line"></span><br><span class="line">movemap = MoveMap()</span><br><span class="line">movemap.set_bb(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">small_mover = SmallMover(movemap, kT, n_moves)</span><br><span class="line">shear_mover = ShearMover(movemap, kT, n_moves)</span><br></pre></td></tr></table></figure>

<h3 id="BackrubMover"><a href="#BackrubMover" class="headerlink" title="BackrubMover"></a><code>BackrubMover</code></h3><table>
<thead>
<tr>
<th><strong><font style="color:rgb(51, 51, 51);">Mover</font></strong></th>
<th><strong><font style="color:rgb(51, 51, 51);">Description</font></strong></th>
</tr>
</thead>
<tbody><tr>
<td><font style="color:#000000;">BackrubMover</font></td>
<td><font style="color:rgb(51, 51, 51);">Makes local rotations around two backbone atoms</font></td>
</tr>
</tbody></table>
<h3 id="Minimization-Mover-MinMoverclass"><a href="#Minimization-Mover-MinMoverclass" class="headerlink" title="Minimization Mover &lt;font style=&quot;color:rgb(51, 51, 51);&quot;&gt;MinMover&lt;/font&gt;class"></a><font style="color:rgb(51, 51, 51);">Minimization Mover </font><code>&lt;font style=&quot;color:rgb(51, 51, 51);&quot;&gt;MinMover&lt;/font&gt;</code>class</h3><p>The <code>MinMover</code> carries out a <strong>gradient-based</strong> minimization to find the <strong>nearest local minimum</strong> in the energy function, such as that used in one step of the Monte-Carlo-plus-Minimization algorithm of Li &amp; Scheraga. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">min_mover = MinMover()</span><br></pre></td></tr></table></figure>

<h2 id="MonteCarloclass"><a href="#MonteCarloclass" class="headerlink" title="MonteCarloclass"></a><code>MonteCarlo</code>class</h2><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p><font style="color:rgba(0, 0, 0, 0.87);">The </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;MonteCarlo&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> object is an encapsulated object that creates a whole MonteCarlo simulation.</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">That is, it can decide whether to accept or reject a trial conformation, and it keeps track of the lowest-energy conformation and other statistics about the search. </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">Having the Monte Carlo operations packaged together is convenient, especially if we want multiple Monte Carlo loops to nest within each other or to operate on different parts of the protein.</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have instantiated a mover `my_mover`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate a `MonteCarlo` object `mc`</span></span><br><span class="line">mc = MonteCarlo(my_pose, scorefxn, kT)</span><br><span class="line"><span class="comment"># my_pose: a Pose object</span></span><br><span class="line"><span class="comment"># scorefxn: a ScoreFunction object</span></span><br><span class="line"><span class="comment"># kT: a parameter - temperature; int or float </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apply the mover</span></span><br><span class="line">my_mover.apply(my_pose) </span><br><span class="line"></span><br><span class="line"><span class="comment"># deside whether or not to accept the move</span></span><br><span class="line">flag = mc.boltzmann(my_pose)</span><br><span class="line"><span class="comment"># flag is boolean</span></span><br><span class="line"><span class="comment"># True: accept</span></span><br><span class="line"><span class="comment"># False: reject</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In practice, these 3 steps should be written into a loop.</span></span><br></pre></td></tr></table></figure>



<p>A Monte Carlo Simulation process is (in pseudo code):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">monte_carlo_sampling</span>(<span class="params">initial_state, kT, N_iteration</span>):</span><br><span class="line">    current_state = initial state</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N_iteration):</span><br><span class="line">        new_state = random_move(current_state)</span><br><span class="line">        <span class="comment">#fe_delta: delta (difference of) free energies</span></span><br><span class="line">        fe_delta = free_energy(new_state)-free_energy(current_state) </span><br><span class="line">        <span class="keyword">if</span> fe_delta &lt; <span class="number">0</span> <span class="keyword">or</span> uniform(<span class="number">1</span>) &lt; exp(-fe_delta / kT): </span><br><span class="line">            <span class="comment"># exp(-fe_delta / kT): boltzmann distribution</span></span><br><span class="line">            current_state = new_state</span><br></pre></td></tr></table></figure>

<h3 id="MonteCarlo-Methods"><a href="#MonteCarlo-Methods" class="headerlink" title="MonteCarlo Methods"></a><code>MonteCarlo</code> Methods</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mc.boltzmann(my_pose) <span class="comment"># See above</span></span><br><span class="line">mc.show_scores()</span><br><span class="line">mc.show_counters()</span><br><span class="line">mc.show_state()</span><br></pre></td></tr></table></figure>

<h3 id="TrialMoverclass"><a href="#TrialMoverclass" class="headerlink" title="TrialMoverclass"></a><code>TrialMover</code>class</h3><p><font style="color:rgba(0, 0, 0, 0.87);">A </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;TrialMover&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> combines a specified </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;Mover&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> with a </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;MonteCarlo&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> object.</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">Each time a </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);background-color:rgb(238, 238, 238);&quot;&gt;TrialMover&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> is called, it performs a trial move and tests that move’ s acceptance with the </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);&quot;&gt;MonteCarlo&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);"> object. </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">It is designed to test the effects of a </font><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);&quot;&gt;Mover&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.87);">.</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trial_mover = TrialMover(small_mover, mc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    trial_mover.apply(test)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(trial_mover.num_accepts())</span><br><span class="line"><span class="built_in">print</span>(trial_mover.acceptance_rate())</span><br><span class="line"></span><br><span class="line"><span class="comment"># After the trial, information about the trial can also be visited by</span></span><br><span class="line"><span class="comment"># mc.show_state()</span></span><br><span class="line"><span class="comment"># so that different movers can be compared</span></span><br></pre></td></tr></table></figure>



<h2 id="SequenceMoverclass-and-RepeatMoverclass"><a href="#SequenceMoverclass-and-RepeatMoverclass" class="headerlink" title="&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);&quot;&gt;SequenceMover&lt;/font&gt;class and RepeatMoverclass"></a><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.87);&quot;&gt;SequenceMover&lt;/font&gt;</code>class and <code>RepeatMover</code>class</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seq_mover = SequenceMover()</span><br><span class="line">seq_mover.add_mover(small_mover)</span><br><span class="line">seq_mover.add_mover(shear_mover)</span><br><span class="line">seq_mover.add_mover(min_mover)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_repeats = <span class="number">3</span></span><br><span class="line">repeat_mover = RepeatMover(my_mover, n_repeats)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyrosetta Resources</title>
    <url>/2025/08/21/Note%20_%20Pyrosetta%20Resources/</url>
    <content><![CDATA[<h1 id="Pyrosetta-Resources"><a href="#Pyrosetta-Resources" class="headerlink" title="Pyrosetta Resources"></a>Pyrosetta Resources</h1><h2 id="Energy-terms"><a href="#Energy-terms" class="headerlink" title="Energy terms"></a>Energy terms</h2><p><a href="https://docs.rosettacommons.org/docs/latest/rosetta_basics/scoring/score-types">https://docs.rosettacommons.org/docs/latest/rosetta_basics&#x2F;scoring&#x2F;score-types</a></p>
<p><a href="https://docs.rosettacommons.org/docs/latest/rosetta_basics/scoring/centroid-score-terms">https://docs.rosettacommons.org/docs/latest/rosetta_basics&#x2F;scoring&#x2F;centroid-score-terms</a></p>
<h2 id="Movers"><a href="#Movers" class="headerlink" title="Movers"></a>Movers</h2><p><a href="https://docs.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/Movers/movers_pages/PyMolMover">https://docs.rosettacommons.org/docs/latest/scripting_documentation&#x2F;RosettaScripts&#x2F;Movers&#x2F;movers_pages&#x2F;PyMolMover</a></p>
<h2 id="FAQ-Important"><a href="#FAQ-Important" class="headerlink" title="FAQ (Important)"></a>FAQ (Important)</h2><p><a href="https://docs.rosettacommons.org/docs/latest/getting_started/FAQ">https://docs.rosettacommons.org/docs/latest/getting_started&#x2F;FAQ</a></p>
<h2 id="initcommands-Important"><a href="#initcommands-Important" class="headerlink" title="initcommands(Important)"></a><code>init</code>commands(Important)</h2><p><a href="https://docs.rosettacommons.org/docs/latest/full-options-list">https://docs.rosettacommons.org/docs/latest/full-options-list</a></p>
<h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><p><a href="https://graylab.jhu.edu/PyRosetta.documentation/pyrosetta.rosetta.core.pack.task.operation.html">https://graylab.jhu.edu/PyRosetta.documentation/pyrosetta.rosetta.core.pack.task.operation.html</a></p>
]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (7): Movers for Side Chain Packing and Design</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(7)_%20Movers%20for%20Side%20Chain%20Packing%20and%20Design/</url>
    <content><![CDATA[<h1 id="PyRosetta-Basics-7-Movers-for-Side-Chain-Packing-and-Design"><a href="#PyRosetta-Basics-7-Movers-for-Side-Chain-Packing-and-Design" class="headerlink" title="PyRosetta Basics (7): Movers for Side Chain Packing and Design"></a>PyRosetta Basics (7): Movers for Side Chain Packing and Design</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Python</span></span><br><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.teaching <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Core Includes</span></span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.kinematics <span class="keyword">import</span> MoveMap</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.kinematics <span class="keyword">import</span> FoldTree</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.pack.task <span class="keyword">import</span> TaskFactory</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.pack.task <span class="keyword">import</span> operation</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.simple_metrics <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.select <span class="keyword">import</span> residue_selector <span class="keyword">as</span> selections</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core <span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.select.movemap <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Protocol Includes</span></span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols <span class="keyword">import</span> minimization_packing <span class="keyword">as</span> pack_min</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols <span class="keyword">import</span> relax <span class="keyword">as</span> rel</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.antibody.residue_selector <span class="keyword">import</span> CDRResidueSelector</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.antibody <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.loops <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.relax <span class="keyword">import</span> FastRelax</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.rosettacommons.org/docs/latest/full-options-list">https://docs.rosettacommons.org/docs/latest/full-options-list</a></p>
<h2 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h2><h3 id="Terms-of-pose-operations"><a href="#Terms-of-pose-operations" class="headerlink" title="Terms of pose operations"></a>Terms of pose operations</h3><ol>
<li>“Folding”: Folding of the backbone, optimizing values of  $ \phi $and $ \psi $and $ \omega $.</li>
<li>“Packing”: Packing of the side chains of residues, optimizing values of $ \chi $etc.</li>
<li>“Designing”: Designing of the protein sequence, optimizing the total energy by changing the identities of amino acids.<br>(e.g. substitute an Arg with a Gly).</li>
</ol>
<p>Monte Carlo simulation is the most basic and classic folding algorithm. </p>
<p>The basic process of the Monte Carlo simulation is shared by all folding, packing and design process.</p>
<details class="lake-collapse"><summary id="u85986045"><span class="ne-text">Basic Folding Process using Monte Carlo simulation</span></summary><p id="u1cf4ba01" class="ne-p"><a href="https://www.yuque.com/yuqueyonghu2r84jv/zmy8pd/gfkfxof6pygtuwkr" data-href="https://www.yuque.com/yuqueyonghu2r84jv/zmy8pd/gfkfxof6pygtuwkr" class="ne-link"><span class="ne-text">Note | PyRosetta Basics (6): Mover</span></a></p><h3 id="e64YK"><span class="ne-text" style="color: rgba(0, 0, 0, 0.87)">Making a trial move</span></h3><p id="u5e5dbfd4" class="ne-p"><span class="ne-text" style="font-size: 14px">Apply a </span><em><span class="ne-text" style="font-size: 14px">move</span></em><span class="ne-text" style="font-size: 14px"> (change) to the </span><em><span class="ne-text" style="font-size: 14px">pose</span></em><span class="ne-text" style="font-size: 14px"> (structure).</span></p><h3 id="irwtJ"><span class="ne-text">Scoring the move</span></h3><p id="u44f841d4" class="ne-p"><span class="ne-text" style="font-size: 14px">Compare the energy scores before and after the move. </span></p><p id="u9e89c1ac" class="ne-p"><span class="ne-text" style="font-size: 14px">(Therefore, the pose should be cloned as a backup before the move.)</span></p><p id="u24599695" class="ne-p"><span class="ne-text" style="font-size: 14px"></span></p><p id="u8cc42be0" class="ne-p"><span class="ne-text" style="font-size: 14px">And, compare the energy score after the </span><em><span class="ne-text" style="font-size: 14px">move</span></em><span class="ne-text" style="font-size: 14px"> and the lowest energy score in history. </span></p><p id="u020e8d13" class="ne-p"><span class="ne-text" style="font-size: 14px">If the score after this </span><em><span class="ne-text" style="font-size: 14px">move</span></em><span class="ne-text" style="font-size: 14px"> is the lowest, store the </span><em><span class="ne-text" style="font-size: 14px">pose </span></em><span class="ne-text" style="font-size: 14px">after this</span><em><span class="ne-text" style="font-size: 14px"> move </span></em><span class="ne-text" style="font-size: 14px">as the best pose, and renew the lowest energy score in history.</span></p><h3 id="TAn8b"><span class="ne-text">Desiding whether or not to accept the move: </span><strong><span class="ne-text">Metropolis criterion</span></strong></h3><p id="ucb6377ba" class="ne-p"><span class="ne-text">For the</span><strong><span class="ne-text"> </span></strong><span class="ne-text">decision step, we need to make a subroutine that either accepts or rejects the new conformatuon based on the </span><strong><span class="ne-text">Metropolis criterion</span></strong><span class="ne-text">. </span></p><p id="u555ca55a" class="ne-p"><span class="ne-text">The difference between the energy scores after (t+1) and before (t) a move is </span><span id="YTTPK" class="ne-math" style="font-size: 14px"><img src="https://cdn.nlark.com/yuque/__latex/140cea98d95645c2586ed9f29e31675b.svg"></span><span class="ne-text">.</span></p><p id="u4257265d" class="ne-p"><span class="ne-text">The Metropolis criterion has a probability of accepting a move as </span><span id="GuL5z" class="ne-math"><img src="https://cdn.nlark.com/yuque/__latex/862838486b7050697b0dee3c6ecb5d6d.svg"></span><span class="ne-text">.</span></p><p id="ub1003231" class="ne-p"><span class="ne-text">When </span><span id="xfX93" class="ne-math"><img src="https://cdn.nlark.com/yuque/__latex/fb3b0300200beee945a7c33ee9da1833.svg"></span><span class="ne-text">, the Metropolis criterion probability of accepting the move is </span><span id="BH3hC" class="ne-math"><img src="https://cdn.nlark.com/yuque/__latex/862838486b7050697b0dee3c6ecb5d6d.svg"></span><span class="ne-text">.</span></p><p id="u03854502" class="ne-p"><span class="ne-text">When </span><span id="jAP7B" class="ne-math"><img src="https://cdn.nlark.com/yuque/__latex/16d5d059d93f960fa208a43278bc6094.svg"></span><span class="ne-text">, the Metropolis criterion probability of accepting the move is </span><span id="U1a3A" class="ne-math"><img src="https://cdn.nlark.com/yuque/__latex/54928c26406c51ef50311d6f0d99f3a6.svg"></span><span class="ne-text">. </span></p><p id="ucd6574c7" class="ne-p"><span class="ne-text">Use </span><span id="lfd2T" class="ne-math"><img src="https://cdn.nlark.com/yuque/__latex/825509854c41e934535f33223f7981f1.svg"></span><span class="ne-text"> . </span></p><p id="u05b7dc94" class="ne-p"><span class="ne-text"></span></p><p id="uf6ba059c" class="ne-p"><span class="ne-text">If the move is accepted, the </span><em><span class="ne-text">pose</span></em><span class="ne-text"> after the </span><em><span class="ne-text">move</span></em><span class="ne-text"> will be used for the next round of trial </span><em><span class="ne-text">move.</span></em></p><p id="ud6027a74" class="ne-p"><span class="ne-text">If not, the </span><em><span class="ne-text">pose</span></em><span class="ne-text"> before the </span><em><span class="ne-text">move </span></em><span class="ne-text">will be used for the next round of trial </span><em><span class="ne-text">move</span></em><span class="ne-text">.</span></p><h3 id="SJZe5"><span class="ne-text">Iterations</span></h3><p id="u892da1c2" class="ne-p"><span class="ne-text">For each iteration, the 3 steps above are excuted. </span></p><p id="u6a79e2e1" class="ne-p"><span class="ne-text">The final output of this program should be the </span><strong><span class="ne-text">lowest energy conformation</span></strong><span class="ne-text"> that is achieved </span><strong><span class="ne-text">at any point</span></strong><span class="ne-text"> during the simulation. </span></p><p id="u53388aed" class="ne-p"><span class="ne-text" style="color: #DF2A3F">NOTICE</span><span class="ne-text">: Search &quot;greedy algorithm&quot; and &quot;Monte Carlo&quot; for more information about the algorithm design. </span></p></details>
### Simulated annealing
Simulated anealing refer to the ramping of temperature `kT`in Python looping.

<ol>
<li>Set a high initial temperature, so that more barriers can be easily overcome.</li>
<li>By gradually decreasing the temperarture after each Python loop, the barriers becomes harder to overcome, and the search range gradually narrows down to a local minimum.</li>
<li>In this process, after a period of “heated” (active) searching across the energy landscape, the energy of a pose is expected to be gradually trapped in a deep trough (valley), which is a reliable local energy minimum (a possible global minimum).</li>
</ol>
<h3 id="Simulated-relaxing"><a href="#Simulated-relaxing" class="headerlink" title="Simulated relaxing"></a>Simulated relaxing</h3><p>Simulated relaxing refer to the ramping of energy score <code>E</code>(and the differences between scores <code>delta_E</code>) in Python looping.</p>
<ol>
<li>Set a small initial weight of an energy term, so that the free energy (and the barriers) are underestimated, and thus the energy barriers are easier to be overcome.</li>
<li>By gradually increasing the weight after each Python loop, the energy estimation becomes more realistic, and the search range gradually narrows down to a local minimum.</li>
<li>In this process, after a period of the “relaxed” (loose) evaluation, energy of a pose is expected to be gradually trapped in a deep trough (valley), which is a reliable local energy minimum (a possible global minimum).</li>
</ol>
<h2 id="Introduction-to-Packing"><a href="#Introduction-to-Packing" class="headerlink" title="Introduction to Packing"></a>Introduction to Packing</h2><p>“Packing” is the process of optimizing the conformation of side chains (values of $ \chi_{n} $and other angles).</p>
<p>The “<em>packer</em>“ is a subset of _movers <em>that apply packing operations to a pose</em>. _</p>
<p>We use “task operations” to configure the behaviors of <em>packers</em>:</p>
<ul>
<li>The “task operations” are provided to a <code>TaskFactory</code>object.</li>
<li>The  <code>TaskFactory</code> is then passed to a <em>packer</em>.</li>
</ul>
<h2 id="init-：Initialize-From-Rosetta-Commandline"><a href="#init-：Initialize-From-Rosetta-Commandline" class="headerlink" title="init()：Initialize From Rosetta Commandline"></a><code>init()</code>：Initialize From Rosetta Commandline</h2><p>We can change some defalt Rosetta (C++) commandline settings through</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyrosetta.rosetta.init()</span><br></pre></td></tr></table></figure>

<p>E.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we can change some defalt settings through</span></span><br><span class="line"><span class="comment"># pyrosetta.rosetta.init()</span></span><br><span class="line"><span class="comment"># or, write as:</span></span><br><span class="line"><span class="comment"># pyrosetta.init()</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line">init(<span class="string">&#x27;-use_input_sc -input_ab_scheme AHo_Scheme -ignore_unrecognized_res \</span></span><br><span class="line"><span class="string">     -ignore_zero_occupancy false -load_PDB_components false -relax:default_repeats 5 -no_fconfig&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">In this initialization, we</span></span><br><span class="line"><span class="string">1. input the scheme for antibody nomenclature;</span></span><br><span class="line"><span class="string">2. use the PDB ligand definitions to load all standard residue descriptions;</span></span><br><span class="line"><span class="string">3. keep the relax mode as `FastRelax` (which is default);</span></span><br><span class="line"><span class="string">4. and set the `FastRelax` repeat times to 5 (by default it is already 5, can be customized);</span></span><br><span class="line"><span class="string">5. and do not load the [common] config file if present.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="TaskFacrtoryclass-prototype-of-PackerTask"><a href="#TaskFacrtoryclass-prototype-of-PackerTask" class="headerlink" title="TaskFacrtoryclass: prototype of PackerTask"></a><code>TaskFacrtory</code>class: prototype of <code>PackerTask</code></h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Instances of<code>PackerTask</code>class are used to determine the specific tasks in packing.</p>
<p><code>TaskFactory</code>is the prototype of <code>PackerTask</code> class.</p>
<p>Every time the protein is packed for a single round, the <code>TaskFactory</code> will generate what is called the <code>PackerTask</code>.</p>
<p>We do NOT use <code>PackerTask</code> directly.</p>
<p>We can set <code>TaskOperations</code>to the <code>TaskFactory</code>, and all <code>PackerTask</code>generated by this<code>TaskFactory</code> will be controlled by these <code>TaskOpterations</code>.</p>
<p>So bascically a <code>TaskFactory</code>object can be seen as “a list of task operations”.</p>
<p>Some <code>TaskOperations</code>can respond to changes in the pose, so we do not set <code>TaskOperations</code> directly to <code>PackerTask</code>in each packing step.</p>
<p>Instead, we use <code>TaskFactory</code>to dynamically generate <code>PackerTask</code>objects in each round, behind the scene. </p>
<h3 id="Instantiation-Configuration-push-back"><a href="#Instantiation-Configuration-push-back" class="headerlink" title="Instantiation &amp; Configuration(push_back)"></a>Instantiation &amp; Configuration(<code>push_back</code>)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tf = TaskFactory() <span class="comment"># Create an empty task factory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And set task operations to the task factory:</span></span><br><span class="line">my_tf.push_back(operation.InitializeFromCommandline()) </span><br><span class="line"><span class="comment"># IMPORTANT! Use configurations declared in `init()`</span></span><br><span class="line">my_tf.push_back(operation.RestrictToRepacking()) </span><br><span class="line"><span class="comment"># Disable &quot;designing of side chains&quot; so that the sequence will be untouched</span></span><br></pre></td></tr></table></figure>

<h3 id="Regional-Packing-selections-PreventRepackingRLT"><a href="#Regional-Packing-selections-PreventRepackingRLT" class="headerlink" title="Regional Packing: selections &amp; PreventRepackingRLT"></a>Regional Packing: <code>selections</code> &amp; <code>PreventRepackingRLT</code></h3><p>We can also use <code>selections</code>for regional packing</p>
<p>E.g. Selecting CDR H1 region of an antibody</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Selecting CDR H1 region of an antibody</span></span><br><span class="line">cdr_selector = CDRResidueSelector() <span class="comment"># Instantiation</span></span><br><span class="line">cdr_selector.set_cdr(h1) <span class="comment"># Select the H1 loop only</span></span><br><span class="line"><span class="comment"># the namespace of `h1` was imported by commandlines that were passed to init() </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Selecting the Neiborhood (in 3D space) residue of CDR H1</span></span><br><span class="line">nbr_selector = selections.NeighborhoodResidueSelector() <span class="comment"># Instantiation</span></span><br><span class="line">nbr_selector.set_focus_selector(cdr_selector) <span class="comment"># Find neighbors of cdr_selector (which is the H1 loop)</span></span><br><span class="line">nbr_selector.set_include_focus_in_subset(<span class="literal">True</span>) <span class="comment"># Include the H1 loop in `nbr_selector` as well</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&quot;RLT&quot;: Residue Level Task Operation</span></span><br><span class="line">prevent_repacking_rlt = operation.PreventRepackingRLT() <span class="comment"># Instantication</span></span><br><span class="line"></span><br><span class="line">prevent_subset_repacking = operation.OperateOnResidueSubset(prevent_repacking_rlt, nbr_selector, <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#`True` indicates here that we are flipping the selection.  </span></span><br><span class="line"><span class="comment"># So that we are turning off everything but the CDR and its neighbors.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `TaskFactory` named `my_tf`</span></span><br><span class="line">my_tf.push_back(prevent_subset_repacking)</span><br></pre></td></tr></table></figure>

<h3 id="TaskFacrtory-Methods"><a href="#TaskFacrtory-Methods" class="headerlink" title="TaskFacrtory Methods"></a><code>TaskFacrtory</code> Methods</h3><h4 id="Add-operations-TaskFacrtory-push-back"><a href="#Add-operations-TaskFacrtory-push-back" class="headerlink" title="Add operations: TaskFacrtory.push_back"></a>Add operations: <code>TaskFacrtory.push_back</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tf.push_back(my_operation) </span><br><span class="line"><span class="comment"># E.g.</span></span><br><span class="line">my_tf.push_back(operation.InitializeFromCommandline()) </span><br></pre></td></tr></table></figure>

<h4 id="Clear-all-operations-TaskFacrtory-clear"><a href="#Clear-all-operations-TaskFacrtory-clear" class="headerlink" title="Clear all operations: TaskFacrtory.clear"></a>Clear all operations: <code>TaskFacrtory.clear</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tf.clear()</span><br></pre></td></tr></table></figure>

<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p><a href="https://graylab.jhu.edu/PyRosetta.documentation/pyrosetta.rosetta.core.pack.task.operation.html">https://graylab.jhu.edu/PyRosetta.documentation/pyrosetta.rosetta.core.pack.task.operation.html</a></p>
<h2 id="PackRotamersMoverclass"><a href="#PackRotamersMoverclass" class="headerlink" title="PackRotamersMoverclass"></a><code>PackRotamersMover</code>class</h2><p>A <em>packer</em> is a <em>mover</em> that carries out packing under the instruction of <code>PackerTask</code>.</p>
<h3 id="Instantiation-Configurations"><a href="#Instantiation-Configurations" class="headerlink" title="Instantiation &amp; Configurations"></a>Instantiation &amp; Configurations</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a `TaskFactory` object called `my_tf`</span></span><br><span class="line">my_packer = pack_min.PackRotamersMover() <span class="comment"># Create a `PackRotamersMover` object</span></span><br><span class="line">my_packer.task_factory(my_tf) <span class="comment"># Pass the `TaskFactory` object to the packer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Note that we are not passing a scorefunction here.  We will use the default, cmd-line scorefunction, </span></span><br><span class="line"><span class="comment"># which can be accessed through `rosetta.core.scoring.get_score_function()`</span></span><br><span class="line"><span class="comment"># We use a scorefunction later. </span></span><br></pre></td></tr></table></figure>

<h3 id="Apply-the-packer-to-a-pose"><a href="#Apply-the-packer-to-a-pose" class="headerlink" title="Apply the packer to a pose"></a>Apply the packer to a pose</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Run the packer. (Note this may take a few minutes)</span></span><br><span class="line">my_packer.apply(pose)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
  <entry>
    <title>PyRosetta Basics (8): Relax Protocols</title>
    <url>/2025/08/21/Note%20_%20PyRosetta%20Basics%20(8)_%20Relax%20Protocols/</url>
    <content><![CDATA[<h1 id="PyRosetta-Basics-8-Relax-Protocols"><a href="#PyRosetta-Basics-8-Relax-Protocols" class="headerlink" title="PyRosetta Basics (8): Relax Protocols"></a>PyRosetta Basics (8): Relax Protocols</h1><h2 id="Initialization-Same-as-the-“Packing”-chapter"><a href="#Initialization-Same-as-the-“Packing”-chapter" class="headerlink" title="Initialization(Same as the “Packing” chapter)"></a>Initialization(Same as the “Packing” chapter)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Python</span></span><br><span class="line"><span class="keyword">from</span> pyrosetta <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.teaching <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Core Includes</span></span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.kinematics <span class="keyword">import</span> MoveMap</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.kinematics <span class="keyword">import</span> FoldTree</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.pack.task <span class="keyword">import</span> TaskFactory</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.pack.task <span class="keyword">import</span> operation</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.simple_metrics <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.select <span class="keyword">import</span> residue_selector <span class="keyword">as</span> selections</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core <span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.core.select.movemap <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Protocol Includes</span></span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols <span class="keyword">import</span> minimization_packing <span class="keyword">as</span> pack_min</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols <span class="keyword">import</span> relax <span class="keyword">as</span> rel</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.antibody.residue_selector <span class="keyword">import</span> CDRResidueSelector</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.antibody <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.loops <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyrosetta.rosetta.protocols.relax <span class="keyword">import</span> FastRelax</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init(<span class="string">&#x27;-use_input_sc -input_ab_scheme AHo_Scheme -ignore_unrecognized_res \</span></span><br><span class="line"><span class="string">     -ignore_zero_occupancy false -load_PDB_components false -relax:default_repeats 2 -no_fconfig&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Introduction-to-Relax"><a href="#Introduction-to-Relax" class="headerlink" title="Introduction to Relax"></a>Introduction to Relax</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><blockquote>
<p>Relax is the main protocol for simple all-atom refinement of structures in the Rosetta force-field. Relax does not do extensive refinement and only searches the local conformational space around the starting structure. Relax is thus often used in conjunction with more aggressive sampling protocols like fragment assembly (abinitio) and loop modelling. To evaluate different conformations based on their Rosetta all-atom score one usually has to apply relax.</p>
<p>It can also read centroid models, in which case it will convert the model into a fullatom model and pack the sidechains. Relax does not carry out any extensive refinement and only searches the local conformational space neighbourhood.</p>
<p>It is further advisable to apply relax only to previously idealized structures. Idealization avoids that score differences arise due to non-ideal geometry (e.g., at the position of former chain-breaks introduced during an aggressive sampling stage and removed by loop closing).</p>
<p><a href="https://docs.rosettacommons.org/docs/latest/application_documentation/structure_prediction/relax">https://docs.rosettacommons.org/docs/latest/application_documentation&#x2F;structure_prediction&#x2F;relax</a></p>
</blockquote>
<h3 id="ClassicRelax"><a href="#ClassicRelax" class="headerlink" title="ClassicRelax"></a><code>ClassicRelax</code></h3><p>Depreciated. Small move + shear move.</p>
<h3 id="FastRelax-default"><a href="#FastRelax-default" class="headerlink" title="FastRelax(default)"></a><code>FastRelax</code>(default)</h3><p>5 cycles of {[packing + minimization] * n_ramping}.</p>
<blockquote>
<p>Packing: optimizing side chain conformations without editing side chains.</p>
<p>Minimization: find local energy minima.</p>
<p>n_ramping: steps of ramping up <code>fa_rep</code> (in one single cycle).</p>
</blockquote>
<p>In each of the 5 cycles, the repulsion energy (<code>fa_rep</code>) are firstly set to a small number, and then gradually increase to a realistic number in n-step ramping.</p>
<p>Pseudo code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a `Pose` object called `my_pose`</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>): <span class="comment"># &quot;5&quot; by default, can be modified</span></span><br><span class="line">    fa_rep = <span class="number">0.1</span> * fa_rep</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n_ramp):</span><br><span class="line">        fa_rep = Increase(fa_rep)</span><br><span class="line">        Packing(my_pose)</span><br><span class="line">        Minimizing(my_pose)</span><br></pre></td></tr></table></figure>

<h3 id="CentroidRelax-for-massive-screening"><a href="#CentroidRelax-for-massive-screening" class="headerlink" title="CentroidRelax(for massive screening)"></a><code>CentroidRelax</code>(for massive screening)</h3><ol>
<li>It uses centroid score functions</li>
<li>It ramps up various energy terms while minimizing the pose</li>
<li>It is rough but fast, thus is suitable for high-throughput structure design<br>(as a pre-processing &amp; evaluation for further <code>FastRelax</code>).</li>
</ol>
<h2 id="FastRelax-class"><a href="#FastRelax-class" class="headerlink" title="FastRelax class"></a><code>FastRelax</code> class</h2><h3 id="Instantiation-Configurations"><a href="#Instantiation-Configurations" class="headerlink" title="Instantiation &amp; Configurations"></a>Instantiation &amp; Configurations</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_fr = FastRelax() <span class="comment"># Instantiation a `FastRelax` object named `my_fr`</span></span><br><span class="line"></span><br><span class="line">my_scorefxn = get_score_function() <span class="comment"># A default ref2015 full atom score function</span></span><br><span class="line"></span><br><span class="line">my_fr.set_scorefxn(my_scorefxn)</span><br><span class="line"></span><br><span class="line"><span class="comment">#FastRelax takes a very long time, </span></span><br><span class="line"><span class="comment">#but we can decrease the amount of minimization cycles we use:</span></span><br><span class="line"><span class="comment">#(Only recommended for cartesian)</span></span><br><span class="line"><span class="comment"># fr.max_iter(100)</span></span><br></pre></td></tr></table></figure>

<h3 id="Apply-FastRelaxto-a-Poseobject"><a href="#Apply-FastRelaxto-a-Poseobject" class="headerlink" title="Apply FastRelaxto a Poseobject"></a>Apply <code>FastRelax</code>to a <code>Pose</code>object</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a `Pose` object named `my_pose`</span></span><br><span class="line">my_fr.apply(my_pose)</span><br></pre></td></tr></table></figure>

<h2 id="Regional-Relax-MoveMapFactoryclass"><a href="#Regional-Relax-MoveMapFactoryclass" class="headerlink" title="Regional Relax: MoveMapFactoryclass"></a>Regional Relax: <code>MoveMapFactory</code>class</h2><h3 id="Introduction-to-MoveMapFactory-class"><a href="#Introduction-to-MoveMapFactory-class" class="headerlink" title="Introduction to MoveMapFactory class"></a>Introduction to <code>MoveMapFactory</code> class</h3><p><code>MoveMapFactory</code>is the prototype of <code>MoveMap</code>.</p>
<p><code>MoveMap</code> instructs a mover. </p>
<p>The default is to have everything OFF first, and turn specific things on.</p>
<p>Regional Relax requires:</p>
<ol>
<li>pre-defined residue selectors</li>
<li>the pose</li>
</ol>
<p>So residue selectors are designed to be passed to the <code>MoveMapFactory</code>.</p>
<p><a href="https://www.yuque.com/yuqueyonghu2r84jv/zmy8pd/gfkfxof6pygtuwkr">Note | PyRosetta Basics (6): Movers for Backbone Folding</a></p>
<p><a href="https://www.rosettacommons.org/docs/latest/scripting_documentation/RosettaScripts/MoveMapFactories/MoveMapFactories-RosettaScripts">MoveMapFactories (RosettaScripts)</a></p>
<h3 id="Instantiation-configuration"><a href="#Instantiation-configuration" class="headerlink" title="Instantiation &amp; configuration"></a>Instantiation &amp; configuration</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Establish Residue Selector</span></span><br><span class="line">cdr_selector = CDRResidueSelector()</span><br><span class="line">cdr_selector.set_cdr(h1)</span><br><span class="line"><span class="comment"># h1 is a Enum imported when we imported the antibody namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate a `MoveMapFactory` object named &quot;my_mmf&quot;</span></span><br><span class="line">my_mmf = MoveMapFactory()</span><br><span class="line"><span class="comment"># Setup `my_mmf`</span></span><br><span class="line">my_mmf.add_bb_action(mm_enable, cdr_selector)</span><br><span class="line">my_mmf.add_chi_action(mm_enable, cdr_selector) </span><br><span class="line"><span class="comment"># mm_enable and mm_disable are Enums (numbered variables) that </span></span><br><span class="line"><span class="comment">#  come when we import the MMF.</span></span><br></pre></td></tr></table></figure>

<h3 id="Check-the-MoveMapFactory-settings"><a href="#Check-the-MoveMapFactory-settings" class="headerlink" title="Check the MoveMapFactory settings"></a>Check the <code>MoveMapFactory</code> settings</h3><p>Based on the <code>MoveMapFactory</code>, we can create a <code>MoveMap</code>object from a <code>Pose</code>object, and thus we can check the settings.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Instantiate a `MoveMap` object from `my_mmf`</span></span><br><span class="line"><span class="comment"># We need to pass in a `Pose` object (`my_pose`)</span></span><br><span class="line">my_mm  = my_mmf.create_movemap_from_pose(my_pose)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inspect my_mm</span></span><br><span class="line"><span class="built_in">print</span>(my_mm)</span><br></pre></td></tr></table></figure>

<h3 id="Basic-Setup-of-Regional-FastRelax"><a href="#Basic-Setup-of-Regional-FastRelax" class="headerlink" title="Basic Setup of Regional FastRelax"></a>Basic Setup of Regional <code>FastRelax</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a `FastRelax` object called `my_fr`</span></span><br><span class="line"><span class="comment"># Assume that we have a `MoveMapFactory` object called `my_mmf`</span></span><br><span class="line">my_fr.set_movemap_factory(my_mmf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `TaskFactory` object called `pack_cdrs_and_neighbors_tf`</span></span><br><span class="line">my_fr.set_task_factory(pack_cdrs_and_neighbors_tf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a default ref2015 full atom score function</span></span><br><span class="line">my_fr.set_scorefxn(my_scorefxn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `Pose` object called `my_pose`</span></span><br><span class="line"><span class="comment"># Finally, we can apply the `my_fr` to `my_pose`:</span></span><br><span class="line">my_fr.apply(my_pose)</span><br></pre></td></tr></table></figure>

<h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><p>Basic Setup may cause large conformation shifts that we don’t want.</p>
<p>We can tackle this problem by using a different score function, OR by customizing the <code>FoldTree</code>.</p>
<p>(Not both)</p>
<h4 id="Cartesian-space-refinement-ref2015-cart"><a href="#Cartesian-space-refinement-ref2015-cart" class="headerlink" title="Cartesian-space refinement ref2015_cart"></a>Cartesian-space refinement <code>ref2015_cart</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create score function specified for Cartesian</span></span><br><span class="line">cart_sf = create_score_function(<span class="string">&quot;ref2015_cart&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `MoveMapFactory` object called `my_mmf`</span></span><br><span class="line">my_mmf.set_cartesian(<span class="literal">True</span>) <span class="comment"># Turn &quot;Cartesian mode&quot; on.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `FastRelax` object called `my_fr`</span></span><br><span class="line">my_fr.set_movemap_factory(my_mmf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `cart_sf` as the score function for FastRelax</span></span><br><span class="line">my_fr.set_scorefxn(cart_sf)</span><br><span class="line">my_fr.cartesian(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#This is a general recommendation for cartesian minimization - it lowers the number of maximum cycles.</span></span><br><span class="line"><span class="comment"># More than this only increases time of protocol, but has little effect on energies/structure</span></span><br><span class="line">fr.max_iter(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>These settings are Cartesian-specifc. They are turned off by default. Turn them off under other circumstances.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_mmf.set_cartesian(<span class="literal">False</span>)</span><br><span class="line">my_fr.cartesian(<span class="literal">False</span>)</span><br><span class="line">my_fr.max_iter(<span class="number">0</span>) <span class="comment">#Reset to default </span></span><br></pre></td></tr></table></figure>

<h4 id="Customizing-FoldTree-A-Classic-way"><a href="#Customizing-FoldTree-A-Classic-way" class="headerlink" title="Customizing FoldTree (A Classic way)"></a>Customizing <code>FoldTree</code> (A Classic way)</h4><p><font style="color:#DF2A3F;">WARNING</font>: If Cartesian has been turned on, we should turn Cartesian off before using this solution.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume that we have a `Pose` object named `my_pose`, and it is an antibody</span></span><br><span class="line">ab_info = AntibodyInfo(my_pose) <span class="comment"># Get antibody-specific information</span></span><br><span class="line">my_ft = FoldTree() <span class="comment"># Instantiate an empty FolTree</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get CDR H1 loop parameters</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; #</span></span><br><span class="line">start = ab_info.get_CDR_start(h1, my_pose)</span><br><span class="line">stop =  ab_info.get_CDR_end(h1, my_pose)</span><br><span class="line">cutpoint = <span class="built_in">int</span>((stop-start)/<span class="number">2</span>) + start</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the loop</span></span><br><span class="line">cdr_loop = Loop(start, stop, cutpoint)</span><br><span class="line">cdr_loops = Loops()</span><br><span class="line">cdr_loops.add_loop(cdr_loop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup of `my_ft`</span></span><br><span class="line">fold_tree_from_loops(my_pose, cdr_loops, my_ft) </span><br><span class="line"></span><br><span class="line">my_pose.fold_tree(my_ft)</span><br><span class="line">original_ft = my_pose.fold_tree() <span class="comment"># Backup the original fold tree</span></span><br><span class="line">add_cutpoint_variants(my_pose)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a default full atom score function</span></span><br><span class="line">scorefxn = get_score_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add chainbreak term to `scorefxn` so we don&#x27;t get wacky stuff.  </span></span><br><span class="line"><span class="comment"># This term helps keep the peptide closed during bb movement.</span></span><br><span class="line">scorefxn_ch = scorefxn <span class="comment"># Copy the default score function</span></span><br><span class="line">scorefxn_ch.set_weight(rosetta.core.scoring.chainbreak, <span class="number">100</span>) <span class="comment"># Add chainbreak term</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `FastRelax` object called `my_fr`</span></span><br><span class="line">my_fr.set_scorefxn(scorefxn_ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that we have a `MoveMap` object (with basic configurations) called `my_mmf`</span></span><br><span class="line">my_fr.set_movemap_factory(my_mmf)</span><br><span class="line"></span><br><span class="line">my_fr.max_iter(<span class="number">0</span>) <span class="comment">#Reset to default </span></span><br><span class="line"><span class="comment"># if it&#x27;s 0, then we don&#x27;t set it in the MinMover that FastRelax runs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start FastRelax</span></span><br><span class="line">my_fr.apply(my_pose)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Reapply the original fold tree</span></span><br><span class="line">my_pose.fold_tree(original_ft)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>protein design</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>PyRosetta</tag>
        <tag>biochemistry</tag>
        <tag>protein</tag>
        <tag>protein design</tag>
      </tags>
  </entry>
</search>
